<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.linksteady.qywx.dao.QywxChatMapper">
    <resultMap id="contractBase" type="com.linksteady.qywx.domain.QywxChatBase">
        <result column="chat_id" jdbcType="VARCHAR" property="chatId"/>
        <result column="status" jdbcType="VARCHAR" property="status"/>
        <result column="insert_dt" jdbcType="TIMESTAMP" property="insertDt"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="insert_by" jdbcType="VARCHAR" property="insertBy"/>
        <result column="group_number" jdbcType="DECIMAL" property="groupNumber"/>
        <result column="group_join" jdbcType="DECIMAL" property="groupJoin"/>
        <result column="group_out" jdbcType="DECIMAL" property="groupOut"/>
        <result column="group_name" jdbcType="VARCHAR" property="groupName"/>
        <result column="owner" jdbcType="VARCHAR" property="owner"/>
        <result column="notice" jdbcType="VARCHAR" property="notice"/>
    </resultMap>

    <resultMap id="custractDetail" type="com.linksteady.qywx.domain.QywxChatDetail">
        <result column="chat_id" jdbcType="VARCHAR" property="chatId"/>
        <result column="userid" jdbcType="VARCHAR" property="userId"/>
        <result column="user_type" jdbcType="VARCHAR" property="userType"/>
        <result column="unionid" jdbcType="VARCHAR" property="unionid"/>
        <result column="join_time" jdbcType="TIMESTAMP" property="joinTime"/>
        <result column="join_scene" jdbcType="VARCHAR" property="joinScene"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
    </resultMap>

    <resultMap id="chatStatistics" type="com.linksteady.qywx.domain.QywxChatStatistics">
        <result column="day_wid" jdbcType="DECIMAL" property="dayWid"/>
        <result column="chat_id" jdbcType="VARCHAR" property="chatId"/>
        <result column="group_number" jdbcType="DECIMAL" property="groupNumber"/>
        <result column="add_number" jdbcType="DECIMAL" property="addNumber"/>
        <result column="out_number" jdbcType="DECIMAL" property="outNumber"/>
    </resultMap>

    <resultMap id="chatStatisticsVO" type="com.linksteady.qywx.domain.QywxChatStatisticsVO">
        <result column="chat_id" jdbcType="VARCHAR" property="chatId"/>
        <result column="join_day" jdbcType="DECIMAL" property="joinDay"/>
        <result column="cnt" jdbcType="DECIMAL" property="cnt"/>
        <result column="grand_total_cnt" jdbcType="DECIMAL" property="grandTotalCnt"/>
    </resultMap>

    <resultMap id="addNumVO" type="com.linksteady.qywx.domain.FriendsNumVO">
        <result column="friends_num" jdbcType="DECIMAL" property="friendsNum"/>
        <result column="un_friends_num" jdbcType="DECIMAL" property="unFriendsNum"/>
    </resultMap>

    <select id="getCount" resultType="int">
        select count(*) from uo_qywx_chat_base where 1=1
        <if test="owner != '' and owner != null">
            and owner=#{owner}
        </if>
        <if test="status != '' and status != null">
            and status=#{status}
        </if>
    </select>

    <select id="getDataList" resultMap="contractBase">
        select a.chat_id,a.status,a.insert_dt,a.insert_by,
       a.group_number,a.group_join,a.group_out,a.group_name,b.name as owner,a.notice,a.create_time
        from uo_qywx_chat_base a join uo_qywx_follower_user_list b on a.owner=b.user_id where 1=1
        <if test="owner != '' and owner != null">
            and a.owner=#{owner}
        </if>
        <if test="status != '' and status != null">
            and a.status=#{status}
        </if>
            order by a.insert_dt desc limit #{limit} offset #{offset}
    </select>

    <select id="getCustomerListCount" resultType="int">
        select count(*) from uo_qywx_chat_detail where chat_id=#{chatId}
    </select>

    <select id="getCustomerList" resultMap="custractDetail">
        select userid,user_type,join_scene,join_time,user_name from (
        select a.userid,a.user_type,a.join_scene,a.join_time, b.name as user_name
        from uo_qywx_chat_detail a,uo_qywx_external_user_list b
        where  a.chat_id=#{chatId} and a.userid=b.external_userid and a.user_type='2'
        union ALL
        select a.userid,a.user_type,a.join_scene,a.join_time, c.name as user_name
        from uo_qywx_chat_detail a,uo_qywx_follower_user_list c
        where a.userid=c.user_id and a.chat_id=#{chatId} and a.user_type='1')bse limit #{limit} offset #{offset}
    </select>

    <insert id="insertDetail">
        insert into uo_qywx_chat_detail( userid, user_type, join_time, join_scene, chat_id)values
        <foreach collection="chatDetailList" item="item" separator=",">
        (#{item.userId},#{item.userType},#{item.joinTime},#{item.joinScene},#{item.chatId})
        </foreach>
        ON CONFLICT(chat_id,userid) do update set
        user_type=excluded.user_type,
        join_time=excluded.join_time,
        join_scene=excluded.join_scene
    </insert>

    <insert id="insertChatBase">
        insert into uo_qywx_chat_base(chat_id,
        status,
        group_name,
        owner,
        notice,
        create_time,
        group_number)values
         (#{chatId},
         #{status},
         #{groupName},
         #{owner},
         #{notice},
         #{createTime},
         #{groupNumber}
         )
        ON CONFLICT(chat_id) do update set
        status=excluded.status,
        group_name=excluded.group_name,
        owner=excluded.owner,
        notice=excluded.notice,
        create_time=excluded.create_time,
        group_number=excluded.group_number
    </insert>

    <delete id="deleteChatBase">
        delete from uo_qywx_chat_base where chat_id=#{chatId}
    </delete>

    <delete id="deleteChatDetail">
        delete from uo_qywx_chat_detail where chat_id=#{chatId}
    </delete>

    <select id="getChatBaseDetail" resultMap="contractBase">
        select a.notice,b.name as owner,a.create_time,a.group_name from uo_qywx_chat_base a join uo_qywx_follower_user_list b on a.owner=b.user_id
        where a.chat_id=#{chatId}
    </select>

    <select id="getDetailData" resultMap="chatStatistics">
        select day_wid, chat_id, group_number, add_number, out_number from uo_qywx_chat_statistics where chat_id=#{chatId}  order by day_wid asc limit 7
    </select>

    <insert id="insertChatDay">
        insert into uo_qywx_chat_statistics(chat_id,day_wid) select chat_id,row_wid as day_wid from w_date cross join (
        select  chat_id,to_char(create_time,'yyyymmdd') chat_create_day
        from uo_qywx_chat_base group by chat_id,to_char(create_time,'yyyymmdd')) t2
        where w_date.row_wid>=t2.chat_create_day::int8
        and w_date.row_wid &lt;= to_char(current_date-1,'yyyymmdd')::int8 on conflict (chat_id,day_wid) do nothing
    </insert>

    <select id="getChatSummary" resultMap="chatStatisticsVO">
       with g1 as (
        select chat_id,to_char(join_time,'yyyymmdd') join_day,count(*) cnt
        from uo_qywx_chat_detail group by chat_id,to_char(join_time,'yyyymmdd'))
        select
             g1.chat_id,g1.join_day,cnt, --某一天的新增
            sum(g1.cnt)over(partition by chat_id order by join_day asc) grand_total_cnt --累计总人数
        from g1 where g1.chat_id=#{chatId} order by join_day asc;
    </select>

    <select id="getChatStatisticsById" resultMap="chatStatistics">
         select day_wid, chat_id, group_number, add_number, out_number from uo_qywx_chat_statistics where chat_id=#{chatId} order by day_wid asc
    </select>

    <select id="getChatStatistics" resultMap="chatStatistics">
        select chat_id, group_number, add_number, out_number, day_wid,
       rank() over(partition by chat_id order by day_wid) rn
        from uo_qywx_chat_statistics
    </select>

    <update id="updateNumber">
        <foreach collection="numlist" separator=";" item="item">
            update uo_qywx_chat_statistics set out_number= #{item.outNumber},group_number=#{item.groupNumber},add_number=#{item.addNumber} where day_wid= #{item.dayWid} and chat_id= #{item.chatId}
        </foreach>
    </update>

    <select id="getChatBaseData" resultMap="contractBase">
        select chat_id, status, insert_dt, insert_by, group_number, group_join, group_out, group_name, owner, notice, create_time from uo_qywx_chat_base;
    </select>

    <select id="getFriendsNum" resultMap="addNumVO">
        with g1 as (
        select uqcb.chat_id,
               uqcb.owner,
               uo_qywx_chat_detail.userid from uo_qywx_chat_detail
            join uo_qywx_chat_base uqcb on uo_qywx_chat_detail.chat_id = uqcb.chat_id
              and uqcb.chat_id=#{chatId}
            )
        select
             count(case when ul.external_userid is not null then g1.userid end ) friends_num,
             count(case when ul.external_userid is  null then g1.userid end )  un_friends_num
        from
              g1 left join uo_qywx_external_user_list ul on g1.owner=ul.follow_user_id
               and g1.userid=ul.external_userid
    </select>


</mapper>