/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linksteady.common.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2021-01-26")
public class ConversionData implements org.apache.thrift.TBase<ConversionData, ConversionData._Fields>, java.io.Serializable, Cloneable, Comparable<ConversionData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConversionData");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField XDATA_FIELD_DESC = new org.apache.thrift.protocol.TField("xdata", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField YDATA_FIELD_DESC = new org.apache.thrift.protocol.TField("ydata", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField ZDATA_FIELD_DESC = new org.apache.thrift.protocol.TField("zdata", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConversionDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConversionDataTupleSchemeFactory();

  public String type; // required
  public java.util.List<Double> xdata; // required
  public java.util.List<Double> ydata; // required
  public java.util.List<Double> zdata; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPE((short)1, "type"),
    XDATA((short)2, "xdata"),
    YDATA((short)3, "ydata"),
    ZDATA((short)4, "zdata");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // XDATA
          return XDATA;
        case 3: // YDATA
          return YDATA;
        case 4: // ZDATA
          return ZDATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.XDATA, new org.apache.thrift.meta_data.FieldMetaData("xdata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.YDATA, new org.apache.thrift.meta_data.FieldMetaData("ydata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.ZDATA, new org.apache.thrift.meta_data.FieldMetaData("zdata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConversionData.class, metaDataMap);
  }

  public ConversionData() {
  }

  public ConversionData(
    String type,
    java.util.List<Double> xdata,
    java.util.List<Double> ydata,
    java.util.List<Double> zdata)
  {
    this();
    this.type = type;
    this.xdata = xdata;
    this.ydata = ydata;
    this.zdata = zdata;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConversionData(ConversionData other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetXdata()) {
      java.util.List<Double> __this__xdata = new java.util.ArrayList<Double>(other.xdata);
      this.xdata = __this__xdata;
    }
    if (other.isSetYdata()) {
      java.util.List<Double> __this__ydata = new java.util.ArrayList<Double>(other.ydata);
      this.ydata = __this__ydata;
    }
    if (other.isSetZdata()) {
      java.util.List<Double> __this__zdata = new java.util.ArrayList<Double>(other.zdata);
      this.zdata = __this__zdata;
    }
  }

  public ConversionData deepCopy() {
    return new ConversionData(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.xdata = null;
    this.ydata = null;
    this.zdata = null;
  }

  public String getType() {
    return this.type;
  }

  public ConversionData setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getXdataSize() {
    return (this.xdata == null) ? 0 : this.xdata.size();
  }

  public java.util.Iterator<Double> getXdataIterator() {
    return (this.xdata == null) ? null : this.xdata.iterator();
  }

  public void addToXdata(double elem) {
    if (this.xdata == null) {
      this.xdata = new java.util.ArrayList<Double>();
    }
    this.xdata.add(elem);
  }

  public java.util.List<Double> getXdata() {
    return this.xdata;
  }

  public ConversionData setXdata(java.util.List<Double> xdata) {
    this.xdata = xdata;
    return this;
  }

  public void unsetXdata() {
    this.xdata = null;
  }

  /** Returns true if field xdata is set (has been assigned a value) and false otherwise */
  public boolean isSetXdata() {
    return this.xdata != null;
  }

  public void setXdataIsSet(boolean value) {
    if (!value) {
      this.xdata = null;
    }
  }

  public int getYdataSize() {
    return (this.ydata == null) ? 0 : this.ydata.size();
  }

  public java.util.Iterator<Double> getYdataIterator() {
    return (this.ydata == null) ? null : this.ydata.iterator();
  }

  public void addToYdata(double elem) {
    if (this.ydata == null) {
      this.ydata = new java.util.ArrayList<Double>();
    }
    this.ydata.add(elem);
  }

  public java.util.List<Double> getYdata() {
    return this.ydata;
  }

  public ConversionData setYdata(java.util.List<Double> ydata) {
    this.ydata = ydata;
    return this;
  }

  public void unsetYdata() {
    this.ydata = null;
  }

  /** Returns true if field ydata is set (has been assigned a value) and false otherwise */
  public boolean isSetYdata() {
    return this.ydata != null;
  }

  public void setYdataIsSet(boolean value) {
    if (!value) {
      this.ydata = null;
    }
  }

  public int getZdataSize() {
    return (this.zdata == null) ? 0 : this.zdata.size();
  }

  public java.util.Iterator<Double> getZdataIterator() {
    return (this.zdata == null) ? null : this.zdata.iterator();
  }

  public void addToZdata(double elem) {
    if (this.zdata == null) {
      this.zdata = new java.util.ArrayList<Double>();
    }
    this.zdata.add(elem);
  }

  public java.util.List<Double> getZdata() {
    return this.zdata;
  }

  public ConversionData setZdata(java.util.List<Double> zdata) {
    this.zdata = zdata;
    return this;
  }

  public void unsetZdata() {
    this.zdata = null;
  }

  /** Returns true if field zdata is set (has been assigned a value) and false otherwise */
  public boolean isSetZdata() {
    return this.zdata != null;
  }

  public void setZdataIsSet(boolean value) {
    if (!value) {
      this.zdata = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case XDATA:
      if (value == null) {
        unsetXdata();
      } else {
        setXdata((java.util.List<Double>)value);
      }
      break;

    case YDATA:
      if (value == null) {
        unsetYdata();
      } else {
        setYdata((java.util.List<Double>)value);
      }
      break;

    case ZDATA:
      if (value == null) {
        unsetZdata();
      } else {
        setZdata((java.util.List<Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case XDATA:
      return getXdata();

    case YDATA:
      return getYdata();

    case ZDATA:
      return getZdata();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case XDATA:
      return isSetXdata();
    case YDATA:
      return isSetYdata();
    case ZDATA:
      return isSetZdata();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConversionData)
      return this.equals((ConversionData)that);
    return false;
  }

  public boolean equals(ConversionData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_xdata = true && this.isSetXdata();
    boolean that_present_xdata = true && that.isSetXdata();
    if (this_present_xdata || that_present_xdata) {
      if (!(this_present_xdata && that_present_xdata))
        return false;
      if (!this.xdata.equals(that.xdata))
        return false;
    }

    boolean this_present_ydata = true && this.isSetYdata();
    boolean that_present_ydata = true && that.isSetYdata();
    if (this_present_ydata || that_present_ydata) {
      if (!(this_present_ydata && that_present_ydata))
        return false;
      if (!this.ydata.equals(that.ydata))
        return false;
    }

    boolean this_present_zdata = true && this.isSetZdata();
    boolean that_present_zdata = true && that.isSetZdata();
    if (this_present_zdata || that_present_zdata) {
      if (!(this_present_zdata && that_present_zdata))
        return false;
      if (!this.zdata.equals(that.zdata))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetXdata()) ? 131071 : 524287);
    if (isSetXdata())
      hashCode = hashCode * 8191 + xdata.hashCode();

    hashCode = hashCode * 8191 + ((isSetYdata()) ? 131071 : 524287);
    if (isSetYdata())
      hashCode = hashCode * 8191 + ydata.hashCode();

    hashCode = hashCode * 8191 + ((isSetZdata()) ? 131071 : 524287);
    if (isSetZdata())
      hashCode = hashCode * 8191 + zdata.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ConversionData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXdata()).compareTo(other.isSetXdata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXdata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xdata, other.xdata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYdata()).compareTo(other.isSetYdata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYdata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ydata, other.ydata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZdata()).compareTo(other.isSetZdata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZdata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zdata, other.zdata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConversionData(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xdata:");
    if (this.xdata == null) {
      sb.append("null");
    } else {
      sb.append(this.xdata);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ydata:");
    if (this.ydata == null) {
      sb.append("null");
    } else {
      sb.append(this.ydata);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("zdata:");
    if (this.zdata == null) {
      sb.append("null");
    } else {
      sb.append(this.zdata);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConversionDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConversionDataStandardScheme getScheme() {
      return new ConversionDataStandardScheme();
    }
  }

  private static class ConversionDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConversionData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConversionData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // XDATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.xdata = new java.util.ArrayList<Double>(_list16.size);
                double _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readDouble();
                  struct.xdata.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setXdataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // YDATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.ydata = new java.util.ArrayList<Double>(_list19.size);
                double _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = iprot.readDouble();
                  struct.ydata.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setYdataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ZDATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct.zdata = new java.util.ArrayList<Double>(_list22.size);
                double _elem23;
                for (int _i24 = 0; _i24 < _list22.size; ++_i24)
                {
                  _elem23 = iprot.readDouble();
                  struct.zdata.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setZdataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConversionData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.xdata != null) {
        oprot.writeFieldBegin(XDATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.xdata.size()));
          for (double _iter25 : struct.xdata)
          {
            oprot.writeDouble(_iter25);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ydata != null) {
        oprot.writeFieldBegin(YDATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.ydata.size()));
          for (double _iter26 : struct.ydata)
          {
            oprot.writeDouble(_iter26);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.zdata != null) {
        oprot.writeFieldBegin(ZDATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.zdata.size()));
          for (double _iter27 : struct.zdata)
          {
            oprot.writeDouble(_iter27);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConversionDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConversionDataTupleScheme getScheme() {
      return new ConversionDataTupleScheme();
    }
  }

  private static class ConversionDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConversionData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConversionData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetXdata()) {
        optionals.set(1);
      }
      if (struct.isSetYdata()) {
        optionals.set(2);
      }
      if (struct.isSetZdata()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetXdata()) {
        {
          oprot.writeI32(struct.xdata.size());
          for (double _iter28 : struct.xdata)
          {
            oprot.writeDouble(_iter28);
          }
        }
      }
      if (struct.isSetYdata()) {
        {
          oprot.writeI32(struct.ydata.size());
          for (double _iter29 : struct.ydata)
          {
            oprot.writeDouble(_iter29);
          }
        }
      }
      if (struct.isSetZdata()) {
        {
          oprot.writeI32(struct.zdata.size());
          for (double _iter30 : struct.zdata)
          {
            oprot.writeDouble(_iter30);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConversionData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.xdata = new java.util.ArrayList<Double>(_list31.size);
          double _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = iprot.readDouble();
            struct.xdata.add(_elem32);
          }
        }
        struct.setXdataIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.ydata = new java.util.ArrayList<Double>(_list34.size);
          double _elem35;
          for (int _i36 = 0; _i36 < _list34.size; ++_i36)
          {
            _elem35 = iprot.readDouble();
            struct.ydata.add(_elem35);
          }
        }
        struct.setYdataIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.zdata = new java.util.ArrayList<Double>(_list37.size);
          double _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = iprot.readDouble();
            struct.zdata.add(_elem38);
          }
        }
        struct.setZdataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

