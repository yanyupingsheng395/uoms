/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linksteady.operate.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-24")
public class ProdInsightService {

  public interface Iface {

    /**
     * 留存率随购买次数变化的模拟曲线
     *
     * @param spuId
     * @param epbProduct_id
     * @param monthDiff
     */
    public RetentionData getRetentionFitData(long spuId, long epbProduct_id, int monthDiff) throws org.apache.thrift.TException;

    /**
     * 转化率曲线数据
     *
     * @param spuId
     * @param rn
     * @param epbProduct_id
     * @param nextEpbProductId
     */
    public ConversionData getConversionData(long spuId, long rn, long epbProduct_id, long nextEpbProductId) throws org.apache.thrift.TException;

    /**
     * 计算活动的转化率预估数据 返回1表示计算成功 0表示计算失败
     *
     * @param head_id
     * @param stage
     */
    public long genPredictCovData(long head_id, java.lang.String stage) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getRetentionFitData(long spuId, long epbProduct_id, int monthDiff, org.apache.thrift.async.AsyncMethodCallback<RetentionData> resultHandler) throws org.apache.thrift.TException;

    public void getConversionData(long spuId, long rn, long epbProduct_id, long nextEpbProductId, org.apache.thrift.async.AsyncMethodCallback<ConversionData> resultHandler) throws org.apache.thrift.TException;

    public void genPredictCovData(long head_id, java.lang.String stage, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public RetentionData getRetentionFitData(long spuId, long epbProduct_id, int monthDiff) throws org.apache.thrift.TException
    {
      send_getRetentionFitData(spuId, epbProduct_id, monthDiff);
      return recv_getRetentionFitData();
    }

    public void send_getRetentionFitData(long spuId, long epbProduct_id, int monthDiff) throws org.apache.thrift.TException
    {
      getRetentionFitData_args args = new getRetentionFitData_args();
      args.setSpuId(spuId);
      args.setEpbProduct_id(epbProduct_id);
      args.setMonthDiff(monthDiff);
      sendBase("getRetentionFitData", args);
    }

    public RetentionData recv_getRetentionFitData() throws org.apache.thrift.TException
    {
      getRetentionFitData_result result = new getRetentionFitData_result();
      receiveBase(result, "getRetentionFitData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRetentionFitData failed: unknown result");
    }

    public ConversionData getConversionData(long spuId, long rn, long epbProduct_id, long nextEpbProductId) throws org.apache.thrift.TException
    {
      send_getConversionData(spuId, rn, epbProduct_id, nextEpbProductId);
      return recv_getConversionData();
    }

    public void send_getConversionData(long spuId, long rn, long epbProduct_id, long nextEpbProductId) throws org.apache.thrift.TException
    {
      getConversionData_args args = new getConversionData_args();
      args.setSpuId(spuId);
      args.setRn(rn);
      args.setEpbProduct_id(epbProduct_id);
      args.setNextEpbProductId(nextEpbProductId);
      sendBase("getConversionData", args);
    }

    public ConversionData recv_getConversionData() throws org.apache.thrift.TException
    {
      getConversionData_result result = new getConversionData_result();
      receiveBase(result, "getConversionData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getConversionData failed: unknown result");
    }

    public long genPredictCovData(long head_id, java.lang.String stage) throws org.apache.thrift.TException
    {
      send_genPredictCovData(head_id, stage);
      return recv_genPredictCovData();
    }

    public void send_genPredictCovData(long head_id, java.lang.String stage) throws org.apache.thrift.TException
    {
      genPredictCovData_args args = new genPredictCovData_args();
      args.setHead_id(head_id);
      args.setStage(stage);
      sendBase("genPredictCovData", args);
    }

    public long recv_genPredictCovData() throws org.apache.thrift.TException
    {
      genPredictCovData_result result = new genPredictCovData_result();
      receiveBase(result, "genPredictCovData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "genPredictCovData failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getRetentionFitData(long spuId, long epbProduct_id, int monthDiff, org.apache.thrift.async.AsyncMethodCallback<RetentionData> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRetentionFitData_call method_call = new getRetentionFitData_call(spuId, epbProduct_id, monthDiff, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRetentionFitData_call extends org.apache.thrift.async.TAsyncMethodCall<RetentionData> {
      private long spuId;
      private long epbProduct_id;
      private int monthDiff;
      public getRetentionFitData_call(long spuId, long epbProduct_id, int monthDiff, org.apache.thrift.async.AsyncMethodCallback<RetentionData> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spuId = spuId;
        this.epbProduct_id = epbProduct_id;
        this.monthDiff = monthDiff;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRetentionFitData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRetentionFitData_args args = new getRetentionFitData_args();
        args.setSpuId(spuId);
        args.setEpbProduct_id(epbProduct_id);
        args.setMonthDiff(monthDiff);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetentionData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRetentionFitData();
      }
    }

    public void getConversionData(long spuId, long rn, long epbProduct_id, long nextEpbProductId, org.apache.thrift.async.AsyncMethodCallback<ConversionData> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getConversionData_call method_call = new getConversionData_call(spuId, rn, epbProduct_id, nextEpbProductId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getConversionData_call extends org.apache.thrift.async.TAsyncMethodCall<ConversionData> {
      private long spuId;
      private long rn;
      private long epbProduct_id;
      private long nextEpbProductId;
      public getConversionData_call(long spuId, long rn, long epbProduct_id, long nextEpbProductId, org.apache.thrift.async.AsyncMethodCallback<ConversionData> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spuId = spuId;
        this.rn = rn;
        this.epbProduct_id = epbProduct_id;
        this.nextEpbProductId = nextEpbProductId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getConversionData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getConversionData_args args = new getConversionData_args();
        args.setSpuId(spuId);
        args.setRn(rn);
        args.setEpbProduct_id(epbProduct_id);
        args.setNextEpbProductId(nextEpbProductId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ConversionData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getConversionData();
      }
    }

    public void genPredictCovData(long head_id, java.lang.String stage, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      genPredictCovData_call method_call = new genPredictCovData_call(head_id, stage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class genPredictCovData_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private long head_id;
      private java.lang.String stage;
      public genPredictCovData_call(long head_id, java.lang.String stage, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.head_id = head_id;
        this.stage = stage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("genPredictCovData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        genPredictCovData_args args = new genPredictCovData_args();
        args.setHead_id(head_id);
        args.setStage(stage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_genPredictCovData();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getRetentionFitData", new getRetentionFitData());
      processMap.put("getConversionData", new getConversionData());
      processMap.put("genPredictCovData", new genPredictCovData());
      return processMap;
    }

    public static class getRetentionFitData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRetentionFitData_args> {
      public getRetentionFitData() {
        super("getRetentionFitData");
      }

      public getRetentionFitData_args getEmptyArgsInstance() {
        return new getRetentionFitData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getRetentionFitData_result getResult(I iface, getRetentionFitData_args args) throws org.apache.thrift.TException {
        getRetentionFitData_result result = new getRetentionFitData_result();
        result.success = iface.getRetentionFitData(args.spuId, args.epbProduct_id, args.monthDiff);
        return result;
      }
    }

    public static class getConversionData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getConversionData_args> {
      public getConversionData() {
        super("getConversionData");
      }

      public getConversionData_args getEmptyArgsInstance() {
        return new getConversionData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getConversionData_result getResult(I iface, getConversionData_args args) throws org.apache.thrift.TException {
        getConversionData_result result = new getConversionData_result();
        result.success = iface.getConversionData(args.spuId, args.rn, args.epbProduct_id, args.nextEpbProductId);
        return result;
      }
    }

    public static class genPredictCovData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, genPredictCovData_args> {
      public genPredictCovData() {
        super("genPredictCovData");
      }

      public genPredictCovData_args getEmptyArgsInstance() {
        return new genPredictCovData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public genPredictCovData_result getResult(I iface, genPredictCovData_args args) throws org.apache.thrift.TException {
        genPredictCovData_result result = new genPredictCovData_result();
        result.success = iface.genPredictCovData(args.head_id, args.stage);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getRetentionFitData", new getRetentionFitData());
      processMap.put("getConversionData", new getConversionData());
      processMap.put("genPredictCovData", new genPredictCovData());
      return processMap;
    }

    public static class getRetentionFitData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRetentionFitData_args, RetentionData> {
      public getRetentionFitData() {
        super("getRetentionFitData");
      }

      public getRetentionFitData_args getEmptyArgsInstance() {
        return new getRetentionFitData_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<RetentionData> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<RetentionData>() {
          public void onComplete(RetentionData o) {
            getRetentionFitData_result result = new getRetentionFitData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getRetentionFitData_result result = new getRetentionFitData_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRetentionFitData_args args, org.apache.thrift.async.AsyncMethodCallback<RetentionData> resultHandler) throws org.apache.thrift.TException {
        iface.getRetentionFitData(args.spuId, args.epbProduct_id, args.monthDiff,resultHandler);
      }
    }

    public static class getConversionData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getConversionData_args, ConversionData> {
      public getConversionData() {
        super("getConversionData");
      }

      public getConversionData_args getEmptyArgsInstance() {
        return new getConversionData_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ConversionData> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ConversionData>() {
          public void onComplete(ConversionData o) {
            getConversionData_result result = new getConversionData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getConversionData_result result = new getConversionData_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getConversionData_args args, org.apache.thrift.async.AsyncMethodCallback<ConversionData> resultHandler) throws org.apache.thrift.TException {
        iface.getConversionData(args.spuId, args.rn, args.epbProduct_id, args.nextEpbProductId,resultHandler);
      }
    }

    public static class genPredictCovData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, genPredictCovData_args, java.lang.Long> {
      public genPredictCovData() {
        super("genPredictCovData");
      }

      public genPredictCovData_args getEmptyArgsInstance() {
        return new genPredictCovData_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() {
          public void onComplete(java.lang.Long o) {
            genPredictCovData_result result = new genPredictCovData_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            genPredictCovData_result result = new genPredictCovData_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, genPredictCovData_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.genPredictCovData(args.head_id, args.stage,resultHandler);
      }
    }

  }

  public static class getRetentionFitData_args implements org.apache.thrift.TBase<getRetentionFitData_args, getRetentionFitData_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRetentionFitData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRetentionFitData_args");

    private static final org.apache.thrift.protocol.TField SPU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spuId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField EPB_PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("epbProduct_id", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField MONTH_DIFF_FIELD_DESC = new org.apache.thrift.protocol.TField("monthDiff", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRetentionFitData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRetentionFitData_argsTupleSchemeFactory();

    public long spuId; // required
    public long epbProduct_id; // required
    public int monthDiff; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPU_ID((short)1, "spuId"),
      EPB_PRODUCT_ID((short)2, "epbProduct_id"),
      MONTH_DIFF((short)3, "monthDiff");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPU_ID
            return SPU_ID;
          case 2: // EPB_PRODUCT_ID
            return EPB_PRODUCT_ID;
          case 3: // MONTH_DIFF
            return MONTH_DIFF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SPUID_ISSET_ID = 0;
    private static final int __EPBPRODUCT_ID_ISSET_ID = 1;
    private static final int __MONTHDIFF_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPU_ID, new org.apache.thrift.meta_data.FieldMetaData("spuId", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EPB_PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("epbProduct_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MONTH_DIFF, new org.apache.thrift.meta_data.FieldMetaData("monthDiff", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRetentionFitData_args.class, metaDataMap);
    }

    public getRetentionFitData_args() {
    }

    public getRetentionFitData_args(
            long spuId,
            long epbProduct_id,
            int monthDiff)
    {
      this();
      this.spuId = spuId;
      setSpuIdIsSet(true);
      this.epbProduct_id = epbProduct_id;
      setEpbProduct_idIsSet(true);
      this.monthDiff = monthDiff;
      setMonthDiffIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRetentionFitData_args(getRetentionFitData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.spuId = other.spuId;
      this.epbProduct_id = other.epbProduct_id;
      this.monthDiff = other.monthDiff;
    }

    public getRetentionFitData_args deepCopy() {
      return new getRetentionFitData_args(this);
    }

    @Override
    public void clear() {
      setSpuIdIsSet(false);
      this.spuId = 0;
      setEpbProduct_idIsSet(false);
      this.epbProduct_id = 0;
      setMonthDiffIsSet(false);
      this.monthDiff = 0;
    }

    public long getSpuId() {
      return this.spuId;
    }

    public getRetentionFitData_args setSpuId(long spuId) {
      this.spuId = spuId;
      setSpuIdIsSet(true);
      return this;
    }

    public void unsetSpuId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPUID_ISSET_ID);
    }

    /** Returns true if field spuId is set (has been assigned a value) and false otherwise */
    public boolean isSetSpuId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPUID_ISSET_ID);
    }

    public void setSpuIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPUID_ISSET_ID, value);
    }

    public long getEpbProduct_id() {
      return this.epbProduct_id;
    }

    public getRetentionFitData_args setEpbProduct_id(long epbProduct_id) {
      this.epbProduct_id = epbProduct_id;
      setEpbProduct_idIsSet(true);
      return this;
    }

    public void unsetEpbProduct_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EPBPRODUCT_ID_ISSET_ID);
    }

    /** Returns true if field epbProduct_id is set (has been assigned a value) and false otherwise */
    public boolean isSetEpbProduct_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EPBPRODUCT_ID_ISSET_ID);
    }

    public void setEpbProduct_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EPBPRODUCT_ID_ISSET_ID, value);
    }

    public int getMonthDiff() {
      return this.monthDiff;
    }

    public getRetentionFitData_args setMonthDiff(int monthDiff) {
      this.monthDiff = monthDiff;
      setMonthDiffIsSet(true);
      return this;
    }

    public void unsetMonthDiff() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MONTHDIFF_ISSET_ID);
    }

    /** Returns true if field monthDiff is set (has been assigned a value) and false otherwise */
    public boolean isSetMonthDiff() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MONTHDIFF_ISSET_ID);
    }

    public void setMonthDiffIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MONTHDIFF_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SPU_ID:
          if (value == null) {
            unsetSpuId();
          } else {
            setSpuId((java.lang.Long)value);
          }
          break;

        case EPB_PRODUCT_ID:
          if (value == null) {
            unsetEpbProduct_id();
          } else {
            setEpbProduct_id((java.lang.Long)value);
          }
          break;

        case MONTH_DIFF:
          if (value == null) {
            unsetMonthDiff();
          } else {
            setMonthDiff((java.lang.Integer)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SPU_ID:
          return getSpuId();

        case EPB_PRODUCT_ID:
          return getEpbProduct_id();

        case MONTH_DIFF:
          return getMonthDiff();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SPU_ID:
          return isSetSpuId();
        case EPB_PRODUCT_ID:
          return isSetEpbProduct_id();
        case MONTH_DIFF:
          return isSetMonthDiff();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getRetentionFitData_args)
        return this.equals((getRetentionFitData_args)that);
      return false;
    }

    public boolean equals(getRetentionFitData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_spuId = true;
      boolean that_present_spuId = true;
      if (this_present_spuId || that_present_spuId) {
        if (!(this_present_spuId && that_present_spuId))
          return false;
        if (this.spuId != that.spuId)
          return false;
      }

      boolean this_present_epbProduct_id = true;
      boolean that_present_epbProduct_id = true;
      if (this_present_epbProduct_id || that_present_epbProduct_id) {
        if (!(this_present_epbProduct_id && that_present_epbProduct_id))
          return false;
        if (this.epbProduct_id != that.epbProduct_id)
          return false;
      }

      boolean this_present_monthDiff = true;
      boolean that_present_monthDiff = true;
      if (this_present_monthDiff || that_present_monthDiff) {
        if (!(this_present_monthDiff && that_present_monthDiff))
          return false;
        if (this.monthDiff != that.monthDiff)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(spuId);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(epbProduct_id);

      hashCode = hashCode * 8191 + monthDiff;

      return hashCode;
    }

    @Override
    public int compareTo(getRetentionFitData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSpuId()).compareTo(other.isSetSpuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spuId, other.spuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEpbProduct_id()).compareTo(other.isSetEpbProduct_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEpbProduct_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.epbProduct_id, other.epbProduct_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMonthDiff()).compareTo(other.isSetMonthDiff());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMonthDiff()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthDiff, other.monthDiff);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getRetentionFitData_args(");
      boolean first = true;

      sb.append("spuId:");
      sb.append(this.spuId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("epbProduct_id:");
      sb.append(this.epbProduct_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("monthDiff:");
      sb.append(this.monthDiff);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRetentionFitData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRetentionFitData_argsStandardScheme getScheme() {
        return new getRetentionFitData_argsStandardScheme();
      }
    }

    private static class getRetentionFitData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRetentionFitData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRetentionFitData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // SPU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.spuId = iprot.readI64();
                struct.setSpuIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EPB_PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.epbProduct_id = iprot.readI64();
                struct.setEpbProduct_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MONTH_DIFF
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.monthDiff = iprot.readI32();
                struct.setMonthDiffIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRetentionFitData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SPU_ID_FIELD_DESC);
        oprot.writeI64(struct.spuId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(EPB_PRODUCT_ID_FIELD_DESC);
        oprot.writeI64(struct.epbProduct_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MONTH_DIFF_FIELD_DESC);
        oprot.writeI32(struct.monthDiff);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRetentionFitData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRetentionFitData_argsTupleScheme getScheme() {
        return new getRetentionFitData_argsTupleScheme();
      }
    }

    private static class getRetentionFitData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRetentionFitData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRetentionFitData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSpuId()) {
          optionals.set(0);
        }
        if (struct.isSetEpbProduct_id()) {
          optionals.set(1);
        }
        if (struct.isSetMonthDiff()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSpuId()) {
          oprot.writeI64(struct.spuId);
        }
        if (struct.isSetEpbProduct_id()) {
          oprot.writeI64(struct.epbProduct_id);
        }
        if (struct.isSetMonthDiff()) {
          oprot.writeI32(struct.monthDiff);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRetentionFitData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.spuId = iprot.readI64();
          struct.setSpuIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.epbProduct_id = iprot.readI64();
          struct.setEpbProduct_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.monthDiff = iprot.readI32();
          struct.setMonthDiffIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRetentionFitData_result implements org.apache.thrift.TBase<getRetentionFitData_result, getRetentionFitData_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRetentionFitData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRetentionFitData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRetentionFitData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRetentionFitData_resultTupleSchemeFactory();

    public RetentionData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetentionData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRetentionFitData_result.class, metaDataMap);
    }

    public getRetentionFitData_result() {
    }

    public getRetentionFitData_result(
            RetentionData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRetentionFitData_result(getRetentionFitData_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetentionData(other.success);
      }
    }

    public getRetentionFitData_result deepCopy() {
      return new getRetentionFitData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetentionData getSuccess() {
      return this.success;
    }

    public getRetentionFitData_result setSuccess(RetentionData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((RetentionData)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getRetentionFitData_result)
        return this.equals((getRetentionFitData_result)that);
      return false;
    }

    public boolean equals(getRetentionFitData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getRetentionFitData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getRetentionFitData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRetentionFitData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRetentionFitData_resultStandardScheme getScheme() {
        return new getRetentionFitData_resultStandardScheme();
      }
    }

    private static class getRetentionFitData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRetentionFitData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRetentionFitData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetentionData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRetentionFitData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRetentionFitData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRetentionFitData_resultTupleScheme getScheme() {
        return new getRetentionFitData_resultTupleScheme();
      }
    }

    private static class getRetentionFitData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRetentionFitData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRetentionFitData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRetentionFitData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetentionData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getConversionData_args implements org.apache.thrift.TBase<getConversionData_args, getConversionData_args._Fields>, java.io.Serializable, Cloneable, Comparable<getConversionData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConversionData_args");

    private static final org.apache.thrift.protocol.TField SPU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spuId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField RN_FIELD_DESC = new org.apache.thrift.protocol.TField("rn", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField EPB_PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("epbProduct_id", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField NEXT_EPB_PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nextEpbProductId", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getConversionData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getConversionData_argsTupleSchemeFactory();

    public long spuId; // required
    public long rn; // required
    public long epbProduct_id; // required
    public long nextEpbProductId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPU_ID((short)1, "spuId"),
      RN((short)2, "rn"),
      EPB_PRODUCT_ID((short)3, "epbProduct_id"),
      NEXT_EPB_PRODUCT_ID((short)4, "nextEpbProductId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPU_ID
            return SPU_ID;
          case 2: // RN
            return RN;
          case 3: // EPB_PRODUCT_ID
            return EPB_PRODUCT_ID;
          case 4: // NEXT_EPB_PRODUCT_ID
            return NEXT_EPB_PRODUCT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SPUID_ISSET_ID = 0;
    private static final int __RN_ISSET_ID = 1;
    private static final int __EPBPRODUCT_ID_ISSET_ID = 2;
    private static final int __NEXTEPBPRODUCTID_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPU_ID, new org.apache.thrift.meta_data.FieldMetaData("spuId", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.RN, new org.apache.thrift.meta_data.FieldMetaData("rn", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EPB_PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("epbProduct_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NEXT_EPB_PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("nextEpbProductId", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConversionData_args.class, metaDataMap);
    }

    public getConversionData_args() {
    }

    public getConversionData_args(
            long spuId,
            long rn,
            long epbProduct_id,
            long nextEpbProductId)
    {
      this();
      this.spuId = spuId;
      setSpuIdIsSet(true);
      this.rn = rn;
      setRnIsSet(true);
      this.epbProduct_id = epbProduct_id;
      setEpbProduct_idIsSet(true);
      this.nextEpbProductId = nextEpbProductId;
      setNextEpbProductIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getConversionData_args(getConversionData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.spuId = other.spuId;
      this.rn = other.rn;
      this.epbProduct_id = other.epbProduct_id;
      this.nextEpbProductId = other.nextEpbProductId;
    }

    public getConversionData_args deepCopy() {
      return new getConversionData_args(this);
    }

    @Override
    public void clear() {
      setSpuIdIsSet(false);
      this.spuId = 0;
      setRnIsSet(false);
      this.rn = 0;
      setEpbProduct_idIsSet(false);
      this.epbProduct_id = 0;
      setNextEpbProductIdIsSet(false);
      this.nextEpbProductId = 0;
    }

    public long getSpuId() {
      return this.spuId;
    }

    public getConversionData_args setSpuId(long spuId) {
      this.spuId = spuId;
      setSpuIdIsSet(true);
      return this;
    }

    public void unsetSpuId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPUID_ISSET_ID);
    }

    /** Returns true if field spuId is set (has been assigned a value) and false otherwise */
    public boolean isSetSpuId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPUID_ISSET_ID);
    }

    public void setSpuIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPUID_ISSET_ID, value);
    }

    public long getRn() {
      return this.rn;
    }

    public getConversionData_args setRn(long rn) {
      this.rn = rn;
      setRnIsSet(true);
      return this;
    }

    public void unsetRn() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RN_ISSET_ID);
    }

    /** Returns true if field rn is set (has been assigned a value) and false otherwise */
    public boolean isSetRn() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RN_ISSET_ID);
    }

    public void setRnIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RN_ISSET_ID, value);
    }

    public long getEpbProduct_id() {
      return this.epbProduct_id;
    }

    public getConversionData_args setEpbProduct_id(long epbProduct_id) {
      this.epbProduct_id = epbProduct_id;
      setEpbProduct_idIsSet(true);
      return this;
    }

    public void unsetEpbProduct_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EPBPRODUCT_ID_ISSET_ID);
    }

    /** Returns true if field epbProduct_id is set (has been assigned a value) and false otherwise */
    public boolean isSetEpbProduct_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EPBPRODUCT_ID_ISSET_ID);
    }

    public void setEpbProduct_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EPBPRODUCT_ID_ISSET_ID, value);
    }

    public long getNextEpbProductId() {
      return this.nextEpbProductId;
    }

    public getConversionData_args setNextEpbProductId(long nextEpbProductId) {
      this.nextEpbProductId = nextEpbProductId;
      setNextEpbProductIdIsSet(true);
      return this;
    }

    public void unsetNextEpbProductId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEXTEPBPRODUCTID_ISSET_ID);
    }

    /** Returns true if field nextEpbProductId is set (has been assigned a value) and false otherwise */
    public boolean isSetNextEpbProductId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEXTEPBPRODUCTID_ISSET_ID);
    }

    public void setNextEpbProductIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEXTEPBPRODUCTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SPU_ID:
          if (value == null) {
            unsetSpuId();
          } else {
            setSpuId((java.lang.Long)value);
          }
          break;

        case RN:
          if (value == null) {
            unsetRn();
          } else {
            setRn((java.lang.Long)value);
          }
          break;

        case EPB_PRODUCT_ID:
          if (value == null) {
            unsetEpbProduct_id();
          } else {
            setEpbProduct_id((java.lang.Long)value);
          }
          break;

        case NEXT_EPB_PRODUCT_ID:
          if (value == null) {
            unsetNextEpbProductId();
          } else {
            setNextEpbProductId((java.lang.Long)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SPU_ID:
          return getSpuId();

        case RN:
          return getRn();

        case EPB_PRODUCT_ID:
          return getEpbProduct_id();

        case NEXT_EPB_PRODUCT_ID:
          return getNextEpbProductId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SPU_ID:
          return isSetSpuId();
        case RN:
          return isSetRn();
        case EPB_PRODUCT_ID:
          return isSetEpbProduct_id();
        case NEXT_EPB_PRODUCT_ID:
          return isSetNextEpbProductId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getConversionData_args)
        return this.equals((getConversionData_args)that);
      return false;
    }

    public boolean equals(getConversionData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_spuId = true;
      boolean that_present_spuId = true;
      if (this_present_spuId || that_present_spuId) {
        if (!(this_present_spuId && that_present_spuId))
          return false;
        if (this.spuId != that.spuId)
          return false;
      }

      boolean this_present_rn = true;
      boolean that_present_rn = true;
      if (this_present_rn || that_present_rn) {
        if (!(this_present_rn && that_present_rn))
          return false;
        if (this.rn != that.rn)
          return false;
      }

      boolean this_present_epbProduct_id = true;
      boolean that_present_epbProduct_id = true;
      if (this_present_epbProduct_id || that_present_epbProduct_id) {
        if (!(this_present_epbProduct_id && that_present_epbProduct_id))
          return false;
        if (this.epbProduct_id != that.epbProduct_id)
          return false;
      }

      boolean this_present_nextEpbProductId = true;
      boolean that_present_nextEpbProductId = true;
      if (this_present_nextEpbProductId || that_present_nextEpbProductId) {
        if (!(this_present_nextEpbProductId && that_present_nextEpbProductId))
          return false;
        if (this.nextEpbProductId != that.nextEpbProductId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(spuId);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rn);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(epbProduct_id);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(nextEpbProductId);

      return hashCode;
    }

    @Override
    public int compareTo(getConversionData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSpuId()).compareTo(other.isSetSpuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spuId, other.spuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRn()).compareTo(other.isSetRn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rn, other.rn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEpbProduct_id()).compareTo(other.isSetEpbProduct_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEpbProduct_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.epbProduct_id, other.epbProduct_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNextEpbProductId()).compareTo(other.isSetNextEpbProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNextEpbProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextEpbProductId, other.nextEpbProductId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getConversionData_args(");
      boolean first = true;

      sb.append("spuId:");
      sb.append(this.spuId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rn:");
      sb.append(this.rn);
      first = false;
      if (!first) sb.append(", ");
      sb.append("epbProduct_id:");
      sb.append(this.epbProduct_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nextEpbProductId:");
      sb.append(this.nextEpbProductId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getConversionData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getConversionData_argsStandardScheme getScheme() {
        return new getConversionData_argsStandardScheme();
      }
    }

    private static class getConversionData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getConversionData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getConversionData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // SPU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.spuId = iprot.readI64();
                struct.setSpuIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RN
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rn = iprot.readI64();
                struct.setRnIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EPB_PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.epbProduct_id = iprot.readI64();
                struct.setEpbProduct_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NEXT_EPB_PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.nextEpbProductId = iprot.readI64();
                struct.setNextEpbProductIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getConversionData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SPU_ID_FIELD_DESC);
        oprot.writeI64(struct.spuId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RN_FIELD_DESC);
        oprot.writeI64(struct.rn);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(EPB_PRODUCT_ID_FIELD_DESC);
        oprot.writeI64(struct.epbProduct_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NEXT_EPB_PRODUCT_ID_FIELD_DESC);
        oprot.writeI64(struct.nextEpbProductId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getConversionData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getConversionData_argsTupleScheme getScheme() {
        return new getConversionData_argsTupleScheme();
      }
    }

    private static class getConversionData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getConversionData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getConversionData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSpuId()) {
          optionals.set(0);
        }
        if (struct.isSetRn()) {
          optionals.set(1);
        }
        if (struct.isSetEpbProduct_id()) {
          optionals.set(2);
        }
        if (struct.isSetNextEpbProductId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSpuId()) {
          oprot.writeI64(struct.spuId);
        }
        if (struct.isSetRn()) {
          oprot.writeI64(struct.rn);
        }
        if (struct.isSetEpbProduct_id()) {
          oprot.writeI64(struct.epbProduct_id);
        }
        if (struct.isSetNextEpbProductId()) {
          oprot.writeI64(struct.nextEpbProductId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getConversionData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.spuId = iprot.readI64();
          struct.setSpuIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rn = iprot.readI64();
          struct.setRnIsSet(true);
        }
        if (incoming.get(2)) {
          struct.epbProduct_id = iprot.readI64();
          struct.setEpbProduct_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.nextEpbProductId = iprot.readI64();
          struct.setNextEpbProductIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getConversionData_result implements org.apache.thrift.TBase<getConversionData_result, getConversionData_result._Fields>, java.io.Serializable, Cloneable, Comparable<getConversionData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConversionData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getConversionData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getConversionData_resultTupleSchemeFactory();

    public ConversionData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConversionData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConversionData_result.class, metaDataMap);
    }

    public getConversionData_result() {
    }

    public getConversionData_result(
            ConversionData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getConversionData_result(getConversionData_result other) {
      if (other.isSetSuccess()) {
        this.success = new ConversionData(other.success);
      }
    }

    public getConversionData_result deepCopy() {
      return new getConversionData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ConversionData getSuccess() {
      return this.success;
    }

    public getConversionData_result setSuccess(ConversionData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((ConversionData)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getConversionData_result)
        return this.equals((getConversionData_result)that);
      return false;
    }

    public boolean equals(getConversionData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getConversionData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getConversionData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getConversionData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getConversionData_resultStandardScheme getScheme() {
        return new getConversionData_resultStandardScheme();
      }
    }

    private static class getConversionData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getConversionData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getConversionData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ConversionData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getConversionData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getConversionData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getConversionData_resultTupleScheme getScheme() {
        return new getConversionData_resultTupleScheme();
      }
    }

    private static class getConversionData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getConversionData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getConversionData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getConversionData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ConversionData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class genPredictCovData_args implements org.apache.thrift.TBase<genPredictCovData_args, genPredictCovData_args._Fields>, java.io.Serializable, Cloneable, Comparable<genPredictCovData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("genPredictCovData_args");

    private static final org.apache.thrift.protocol.TField HEAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("head_id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("stage", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new genPredictCovData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new genPredictCovData_argsTupleSchemeFactory();

    public long head_id; // required
    public java.lang.String stage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEAD_ID((short)1, "head_id"),
      STAGE((short)2, "stage");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEAD_ID
            return HEAD_ID;
          case 2: // STAGE
            return STAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HEAD_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEAD_ID, new org.apache.thrift.meta_data.FieldMetaData("head_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.STAGE, new org.apache.thrift.meta_data.FieldMetaData("stage", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(genPredictCovData_args.class, metaDataMap);
    }

    public genPredictCovData_args() {
    }

    public genPredictCovData_args(
            long head_id,
            java.lang.String stage)
    {
      this();
      this.head_id = head_id;
      setHead_idIsSet(true);
      this.stage = stage;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public genPredictCovData_args(genPredictCovData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.head_id = other.head_id;
      if (other.isSetStage()) {
        this.stage = other.stage;
      }
    }

    public genPredictCovData_args deepCopy() {
      return new genPredictCovData_args(this);
    }

    @Override
    public void clear() {
      setHead_idIsSet(false);
      this.head_id = 0;
      this.stage = null;
    }

    public long getHead_id() {
      return this.head_id;
    }

    public genPredictCovData_args setHead_id(long head_id) {
      this.head_id = head_id;
      setHead_idIsSet(true);
      return this;
    }

    public void unsetHead_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEAD_ID_ISSET_ID);
    }

    /** Returns true if field head_id is set (has been assigned a value) and false otherwise */
    public boolean isSetHead_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEAD_ID_ISSET_ID);
    }

    public void setHead_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEAD_ID_ISSET_ID, value);
    }

    public java.lang.String getStage() {
      return this.stage;
    }

    public genPredictCovData_args setStage(java.lang.String stage) {
      this.stage = stage;
      return this;
    }

    public void unsetStage() {
      this.stage = null;
    }

    /** Returns true if field stage is set (has been assigned a value) and false otherwise */
    public boolean isSetStage() {
      return this.stage != null;
    }

    public void setStageIsSet(boolean value) {
      if (!value) {
        this.stage = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case HEAD_ID:
          if (value == null) {
            unsetHead_id();
          } else {
            setHead_id((java.lang.Long)value);
          }
          break;

        case STAGE:
          if (value == null) {
            unsetStage();
          } else {
            setStage((java.lang.String)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case HEAD_ID:
          return getHead_id();

        case STAGE:
          return getStage();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case HEAD_ID:
          return isSetHead_id();
        case STAGE:
          return isSetStage();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof genPredictCovData_args)
        return this.equals((genPredictCovData_args)that);
      return false;
    }

    public boolean equals(genPredictCovData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_head_id = true;
      boolean that_present_head_id = true;
      if (this_present_head_id || that_present_head_id) {
        if (!(this_present_head_id && that_present_head_id))
          return false;
        if (this.head_id != that.head_id)
          return false;
      }

      boolean this_present_stage = true && this.isSetStage();
      boolean that_present_stage = true && that.isSetStage();
      if (this_present_stage || that_present_stage) {
        if (!(this_present_stage && that_present_stage))
          return false;
        if (!this.stage.equals(that.stage))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(head_id);

      hashCode = hashCode * 8191 + ((isSetStage()) ? 131071 : 524287);
      if (isSetStage())
        hashCode = hashCode * 8191 + stage.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(genPredictCovData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHead_id()).compareTo(other.isSetHead_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHead_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.head_id, other.head_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStage()).compareTo(other.isSetStage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stage, other.stage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("genPredictCovData_args(");
      boolean first = true;

      sb.append("head_id:");
      sb.append(this.head_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stage:");
      if (this.stage == null) {
        sb.append("null");
      } else {
        sb.append(this.stage);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class genPredictCovData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public genPredictCovData_argsStandardScheme getScheme() {
        return new genPredictCovData_argsStandardScheme();
      }
    }

    private static class genPredictCovData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<genPredictCovData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, genPredictCovData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HEAD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.head_id = iprot.readI64();
                struct.setHead_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stage = iprot.readString();
                struct.setStageIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, genPredictCovData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HEAD_ID_FIELD_DESC);
        oprot.writeI64(struct.head_id);
        oprot.writeFieldEnd();
        if (struct.stage != null) {
          oprot.writeFieldBegin(STAGE_FIELD_DESC);
          oprot.writeString(struct.stage);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class genPredictCovData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public genPredictCovData_argsTupleScheme getScheme() {
        return new genPredictCovData_argsTupleScheme();
      }
    }

    private static class genPredictCovData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<genPredictCovData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, genPredictCovData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHead_id()) {
          optionals.set(0);
        }
        if (struct.isSetStage()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHead_id()) {
          oprot.writeI64(struct.head_id);
        }
        if (struct.isSetStage()) {
          oprot.writeString(struct.stage);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, genPredictCovData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.head_id = iprot.readI64();
          struct.setHead_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stage = iprot.readString();
          struct.setStageIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class genPredictCovData_result implements org.apache.thrift.TBase<genPredictCovData_result, genPredictCovData_result._Fields>, java.io.Serializable, Cloneable, Comparable<genPredictCovData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("genPredictCovData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new genPredictCovData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new genPredictCovData_resultTupleSchemeFactory();

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(genPredictCovData_result.class, metaDataMap);
    }

    public genPredictCovData_result() {
    }

    public genPredictCovData_result(
            long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public genPredictCovData_result(genPredictCovData_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public genPredictCovData_result deepCopy() {
      return new genPredictCovData_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public genPredictCovData_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((java.lang.Long)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof genPredictCovData_result)
        return this.equals((genPredictCovData_result)that);
      return false;
    }

    public boolean equals(genPredictCovData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(genPredictCovData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("genPredictCovData_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class genPredictCovData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public genPredictCovData_resultStandardScheme getScheme() {
        return new genPredictCovData_resultStandardScheme();
      }
    }

    private static class genPredictCovData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<genPredictCovData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, genPredictCovData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, genPredictCovData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class genPredictCovData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public genPredictCovData_resultTupleScheme getScheme() {
        return new genPredictCovData_resultTupleScheme();
      }
    }

    private static class genPredictCovData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<genPredictCovData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, genPredictCovData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, genPredictCovData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
