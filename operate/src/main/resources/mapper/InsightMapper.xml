<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.linksteady.operate.dao.InsightMapper">

    <resultMap id="base" type="com.linksteady.common.domain.Ztree">
        <result column="id" jdbcType="VARCHAR" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="open" jdbcType="BOOLEAN" property="open"/>
    </resultMap>

    <select id="getSpuTree" resultMap="base">
        select SPU_WID id, SPU_NAME name from W_PRODUCT_SPU
    </select>

    <select id="getProductTree" resultMap="base">
        select distinct ebp_product_id id, EBP_PRODUCT_NAME name from w_product
        where SPU_WID = #{spuWid}
    </select>

    <select id="retentionInPurchaseTimes" resultType="map">
        --留存率随购买次数的变化
        WITH t1 AS (
        SELECT v1.USER_ID, v1.ORDER_DT, v1.ORDER_ID, v2.SPU_WID
        FROM W_ORDER_DETAILS v1
        LEFT JOIN W_PRODUCT v2
        ON v1.PRODUCT_ID = v2.PRODUCT_ID
        where v1.VALID_STATUS = 1
        <if test="type == 'product'">
            and v2.ebp_product_id = #{id}
        </if>
        <if test="type == 'spu'">
            and v2.SPU_WID = #{id}
        </if>
        and v1.ORDER_DT_WID >= to_char(ADD_MONTHS(SYSDATE, #{period}), 'yyyymmdd') --如果是过去12个月则 为-12
        GROUP BY v1.USER_ID, v1.ORDER_DT, v1.ORDER_ID, v2.SPU_WID
        ),

        t2 as
        (
        SELECT
        t1.USER_ID,
        t1.SPU_WID,
        DENSE_RANK () OVER (PARTITION BY t1.USER_ID,t1.SPU_WID
        ORDER BY t1.ORDER_DT,t1.ORDER_ID) spu_rn --用户在spu上的购买次数
        FROM t1
        ),
        t3 as (
        --查询当前SPU在每个购买次数上的留存率
        SELECT t2.SPU_WID, t2.SPU_RN,COUNT (1) leave_pearson FROM t2 GROUP BY t2.SPU_WID,t2.SPU_RN ORDER BY
        t2.SPU_WID,t2.SPU_RN
        )
        --spu wid,spu购买次数、留存率
        SELECT t3.SPU_WID,t3.SPU_RN,trunc(t3.leave_pearson/lag(t3.LEAVE_PEARSON,1,null) over(order by t3.SPU_RN),4)*100
        leave_rate FROM t3
    </select>

    <select id="unitPriceInPurchaseTimes" resultType="map">
      WITH SPU_PURCH AS (
      SELECT SPU_WID,
             USER_ID,
             ROW_NUMBER() OVER (PARTITION BY SPU_WID, USER_ID ORDER BY ORDER_DT ASC)     PURCH_TIMES,
             LAG(ORDER_DT, 1) OVER (PARTITION BY SPU_WID, USER_ID ORDER BY ORDER_DT ASC) PREV_PUR_DT,
             ORDER_DT,
             SPU_ORDER_FEE                                                               PURCH_FEE,
             QUANTITY,
             ORDER_ID
      FROM (
             SELECT t2.SPU_WID,
                    t1.USER_ID,
                    ORDER_ID,
                    ORDER_DT,
                    SUM(t1.PRICE * t1.QUANTITY) SPU_ORDER_FEE, SUM(QUANTITY) QUANTITY
             FROM W_ORDER_DETAILS t1, W_PRODUCT t2
               WHERE t1.PRODUCT_ID = t2.PRODUCT_ID
                <if test="type == 'product'">
                    and t2.ebp_product_id = #{id}
                </if>
                <if test="type == 'spu'">
                    and t2.SPU_WID = #{id}
                </if>
               AND t1.VALID_STATUS = 1
               AND t1.PRICE > 0
               and t1.ORDER_DT_WID >= to_char(ADD_MONTHS(SYSDATE, #{period}), 'yyyymmdd') --如果是过去12个月则 为-12
               GROUP BY t2.SPU_WID, t1.USER_ID, ORDER_ID, ORDER_DT
           ) u
    ),
         PURCH_CATE_NUM AS (
           SELECT ORDER_ID, COUNT(DISTINCT SPU_WID) CATE_NUM
           FROM SPU_PURCH
             GROUP BY ORDER_ID
         )
    SELECT SPU_WID, PURCH_TIMES, UPRICE
    FROM (
           SELECT SPU_WID,
                  PURCH_TIMES,
                  TRUNC(SUM(PURCH_FEE) / SUM(QUANTITY), 2) UPRICE
           FROM SPU_PURCH v1,
                PURCH_CATE_NUM v2
             WHERE
                v1.ORDER_ID = v2.ORDER_ID
             GROUP BY
                SPU_WID,
                PURCH_TIMES
         )
    </select>

    <select id="joinRateInPurchaseTimes" resultType="map">
        WITH SPU_PURCH AS (
          SELECT SPU_WID,
                 USER_ID,
                 ROW_NUMBER() OVER (PARTITION BY SPU_WID, USER_ID ORDER BY ORDER_DT ASC)     PURCH_TIMES,
                 LAG(ORDER_DT, 1) OVER (PARTITION BY SPU_WID, USER_ID ORDER BY ORDER_DT ASC) PREV_PUR_DT,
                 ORDER_DT,
                 SPU_ORDER_FEE                                                               PURCH_FEE,
                 QUANTITY,
                 ORDER_ID
          FROM (
                 SELECT t2.SPU_WID,
                        t1.USER_ID,
                        ORDER_ID,
                        ORDER_DT,
                        SUM(t1.PRICE * t1.QUANTITY) SPU_ORDER_FEE，SUM(QUANTITY) QUANTITY
                 FROM W_ORDER_DETAILS t1, W_PRODUCT t2
                   WHERE t1.PRODUCT_ID = t2.PRODUCT_ID
                    <if test="type == 'product'">
                        and t2.ebp_product_id = #{id}
                    </if>
                    <if test="type == 'spu'">
                        and t2.SPU_WID = #{id}
                    </if>
                   AND t1.VALID_STATUS = 1
                   AND t1.PRICE > 0
                   and t1.ORDER_DT_WID >= to_char(ADD_MONTHS(SYSDATE, #{period}), 'yyyymmdd') --如果是过去12个月则 为-12
        GROUP BY t2.SPU_WID, t1.USER_ID, ORDER_ID, ORDER_DT
               )
        ),
             PURCH_CATE_NUM AS (
               SELECT ORDER_ID, COUNT(DISTINCT SPU_WID) CATE_NUM
               FROM SPU_PURCH
                 GROUP BY ORDER_ID
             )
        SELECT SPU_WID, PURCH_TIMES, JOINT
        FROM (
               SELECT SPU_WID,
                      PURCH_TIMES,
                      TRUNC(SUM(QUANTITY) / COUNT(*), 2) JOINT
               FROM SPU_PURCH v1
                 GROUP BY
                    SPU_WID,
                    PURCH_TIMES
             )
    </select>

    <select id="categoryInPurchaseTimes" resultType="map">
        WITH SPU_PURCH AS(
         SELECT SPU_WID,
               USER_ID,
               ROW_NUMBER() OVER(PARTITION BY SPU_WID, USER_ID ORDER BY ORDER_DT ASC) PURCH_TIMES,
               LAG(ORDER_DT, 1) OVER(PARTITION BY SPU_WID, USER_ID ORDER BY ORDER_DT ASC) PREV_PUR_DT,
               ORDER_DT,
               SPU_ORDER_FEE  PURCH_FEE,
               QUANTITY,
               ORDER_ID
           FROM (
              SELECT
                t2.SPU_WID,t1.USER_ID,ORDER_ID,ORDER_DT,SUM(t1.PRICE * t1.QUANTITY) SPU_ORDER_FEE，SUM(QUANTITY) QUANTITY
            FROM W_ORDER_DETAILS t1, W_PRODUCT t2
           WHERE t1.PRODUCT_ID = t2.PRODUCT_ID
            <if test="type == 'product'">
                and t2.ebp_product_id = #{id}
            </if>
            <if test="type == 'spu'">
                and t2.SPU_WID = #{id}
            </if>
             AND t1.VALID_STATUS = 1
             AND t1.PRICE > 0
        and t1.ORDER_DT_WID >= to_char(ADD_MONTHS(SYSDATE, #{period}), 'yyyymmdd') --如果是过去12个月则 为-12
        GROUP BY t2.SPU_WID,t1.USER_ID,ORDER_ID,ORDER_DT
           )
        ),
        PURCH_CATE_NUM AS(
          SELECT ORDER_ID, COUNT(DISTINCT SPU_WID) CATE_NUM
            FROM SPU_PURCH
           GROUP BY ORDER_ID
        )
        SELECT SPU_WID, PURCH_TIMES,AVG_CATE_NUM
        FROM (
        SELECT SPU_WID,
               PURCH_TIMES,
                TRUNC(SUM(v2.CATE_NUM)/COUNT(*),2) AVG_CATE_NUM
          FROM SPU_PURCH v1,PURCH_CATE_NUM v2
          WHERE v1.ORDER_ID = v2.ORDER_ID
         GROUP BY SPU_WID,PURCH_TIMES
         )
    </select>

    <select id="periodInPurchaseTimes" resultType="map">
        WITH SPU_PURCH AS(
        SELECT SPU_WID,
        USER_ID,
        ROW_NUMBER() OVER(PARTITION BY SPU_WID, USER_ID ORDER BY ORDER_DT ASC) PURCH_TIMES,
        LAG(ORDER_DT, 1) OVER(PARTITION BY SPU_WID, USER_ID ORDER BY ORDER_DT ASC) PREV_PUR_DT,
        ORDER_DT,
        SPU_ORDER_FEE  PURCH_FEE,
        QUANTITY,
        ORDER_ID
        FROM (
        SELECT
        t2.SPU_WID,t1.USER_ID,ORDER_ID,ORDER_DT,SUM(t1.PRICE * t1.QUANTITY) SPU_ORDER_FEE,SUM(QUANTITY) QUANTITY
        FROM W_ORDER_DETAILS t1, W_PRODUCT t2
        WHERE t1.PRODUCT_ID = t2.PRODUCT_ID
        <if test="type == 'product'">
            and t2.ebp_product_id = #{id}
        </if>
        <if test="type == 'spu'">
            and t2.SPU_WID = #{id}
        </if>
        AND t1.VALID_STATUS = 1
        AND t1.PRICE > 0
        and t1.ORDER_DT_WID >= to_char(ADD_MONTHS(SYSDATE, #{period}), 'yyyymmdd') --如果是过去12个月则 为-12
        GROUP BY t2.SPU_WID,t1.USER_ID,ORDER_ID,ORDER_DT)),
        PUR_GAP_RN AS(
        SELECT SPU_WID,
        PURCH_TIMES,
        USER_ID,
        TRUNC(ORDER_DT) - TRUNC(PREV_PUR_DT) PUR_GAP,
        ROW_NUMBER() OVER(PARTITION BY SPU_WID, PURCH_TIMES ORDER BY TRUNC(ORDER_DT) - TRUNC(PREV_PUR_DT) ASC) RN
        FROM SPU_PURCH
        WHERE TRUNC(ORDER_DT) - TRUNC(PREV_PUR_DT) > 0
        )

        SELECT v1.SPU_WID, v1.PURCH_TIMES,TRUNC(AVG(v2.PUR_GAP),2) AVG_PUR_GAP FROM(
        SELECT  SPU_WID,PURCH_TIMES,COUNT(*) TTL_NUM FROM PUR_GAP_RN GROUP BY  SPU_WID,PURCH_TIMES

        ) v1,PUR_GAP_RN v2
        WHERE v1.SPU_WID = v2.SPU_WID
        AND v1.PURCH_TIMES = v2.PURCH_TIMES
        AND v2.RN &lt;=  CEIL(v1.TTL_NUM * 0.8)
        GROUP BY v1.SPU_WID,v1.PURCH_TIMES
    </select>

    <select id="getSpuConvertRateProducts" resultType="map">
        with g1 as (
        select t1.ebp_product_id,t1.trans_rn,t2.ebp_product_id target_epb_product_id,count(*) cnt
        from WP_INSIGHT_TRANS t1, WP_INSIGHT_TRANS t2
        where t1.user_id = t2.user_id
        and t1.trans_rn=t2.trans_rn-1
        <if test="type == 'spu'">
            and t1.spu_wid=#{id}
        </if>
        <if test="type == 'product'">
            and t1.ebp_product_id=#{id}
        </if>
        group by t1.ebp_product_id,t2.ebp_product_id,t1.trans_rn),
        g11 as (
        select
        g1.trans_rn,
        g1.ebp_product_id,
        g1.target_epb_product_id,
        row_number () over (
        partition BY g1.ebp_product_id,g1.trans_rn
        ORDER BY
        g1.cnt DESC
        ) rn, --排序号 取top3的依据 按转化次数倒排序
        g1.cnt,
        sum(g1.cnt)over(partition by g1.ebp_product_id,g1.trans_rn) all_cnt   --累计
        from g1 )
        select trans_rn,
        e1.ebp_product_name source,
        rownum||'.'||e2.ebp_product_name target,
        (case when all_cnt = 0 then 0 else round(cnt / all_cnt, 4) * 100 end ) value
        from g11,w_product_ebp e1,w_product_ebp e2
        where
        g11.ebp_product_id=e1.ebp_product_id
        and g11.target_epb_product_id=e2.ebp_product_id
        and trans_rn = #{purchOrder}  --购买次序
        and rn &lt;= 3
    </select>

    <select id="findSpuByPurchOrder" resultType="map">
        select SPU_WID id, SPU_NAME name from W_PRODUCT_SPU
    </select>

    <select id="getSpuRelation" resultType="map">
        SELECT SPU_WID, SPU_NAME, EBP_PRODUCT_ID, EBP_PRODUCT_NAME, SUM(PRODUCT_CNT) PRODUCT_CNT, spu_cnt
        FROM (
                 select t.SPU_WID,
                        (CASE WHEN PRODUCT_CNT > SPU_CNT * 0.05 THEN EBP_PRODUCT_ID ELSE '-1' END)   EBP_PRODUCT_ID,
                        PRODUCT_CNT,
                        SPU_CNT,
                        SPU_NAME,
                        (CASE WHEN PRODUCT_CNT > SPU_CNT * 0.05 THEN EBP_PRODUCT_NAME ELSE '其他' END) EBP_PRODUCT_NAME
                 from (
                          SELECT v1.SPU_WID,
                                 v1.EBP_PRODUCT_ID,
                                 v1.cnt                                       product_cnt,
                                 sum(v1.cnt) over ( partition BY v1.spu_wid ) spu_cnt,
                                 v2.spu_name                                  spu_name,
                                 (CASE
                                      WHEN EBP_PRODUCT_NAME IS NULL THEN v1.EBP_PRODUCT_ID
                                      ELSE EBP_PRODUCT_NAME END)              EBP_PRODUCT_NAME
                          FROM (
                                   SELECT spu_wid,
                                          EBP_PRODUCT_ID,
                                          count(1) cnt
                                   FROM WP_USER_PATH
                                   WHERE SPU_WID = #{spuId}
                                     AND rn = #{purchOrder}
                                   GROUP BY spu_wid, EBP_PRODUCT_ID
                               ) v1,
                               w_product_spu v2,
                               W_PRODUCT_EBP v3
                          where v1.SPU_WID = v2.SPU_WID(+)
                            and v1.EBP_PRODUCT_ID = v3.EBP_PRODUCT_ID(+)
                      ) t
                 order by product_cnt desc
             )
        GROUP BY SPU_WID, SPU_NAME, EBP_PRODUCT_ID, EBP_PRODUCT_NAME,spu_cnt
    </select>

    <select id="getProductConvertRate" resultType="map">
        with g1 as (
            SELECT spu_wid,
                   count(1) next_product_cnt,
                   NEXT_EBP_PRODUCT_ID
            FROM WP_USER_PATH
            WHERE SPU_WID = #{spuId}
              AND rn = #{purchOrder}
              and EBP_PRODUCT_ID = #{productId}
            GROUP BY spu_wid,
                     NEXT_EBP_PRODUCT_ID
        ),
             g2 as (
                 SELECT count(1) product_cnt
                 FROM WP_USER_PATH
                 WHERE SPU_WID = #{spuId}
                   AND rn = #{purchOrder}
                   and EBP_PRODUCT_ID = #{productId}
             ),
             g3 as (
                 select NEXT_EBP_PRODUCT_ID,
                        next_product_cnt,
                        product_cnt,
                        trunc((next_product_cnt / product_cnt) * 100, 2) convert_rate
                 from g1,
                      g2
                 where NEXT_EBP_PRODUCT_ID is not null
                 order by next_product_cnt desc
             )
        SELECT NEXT_EBP_PRODUCT_ID, EBP_PRODUCT_NAME, SUM(next_product_cnt), SUM(convert_rate) convert_rate
        FROM (
                 SELECT (CASE WHEN EBP_PRODUCT_NAME IS NULL THEN NEXT_EBP_PRODUCT_ID ELSE '-1' END)             NEXT_EBP_PRODUCT_ID,
                        (CASE
                             WHEN EBP_PRODUCT_NAME IS NULL THEN NEXT_EBP_PRODUCT_ID
                             ELSE EBP_PRODUCT_NAME END)                                                         EBP_PRODUCT_NAME,
                        next_product_cnt,
                        convert_rate
                 FROM (
                          select (CASE WHEN convert_rate >= 5 THEN NEXT_EBP_PRODUCT_ID ELSE '-1' END) NEXT_EBP_PRODUCT_ID,
                                 (CASE WHEN convert_rate >= 5 THEN EBP_PRODUCT_NAME ELSE '其他' END)    EBP_PRODUCT_NAME,
                                 next_product_cnt,
                                 convert_rate
                          from g3,
                               W_PRODUCT_EBP t1
                          where g3.NEXT_EBP_PRODUCT_ID = t1.EBP_PRODUCT_ID(+)
                      )
             )
        GROUP BY NEXT_EBP_PRODUCT_ID, EBP_PRODUCT_NAME
        order by convert_rate desc
    </select>

    <select id="getUserGrowthPathWithSpu" resultType="map">
        select ACTIVE_TYPE, ACTIVE_DUAL, trunc(PROB, 2) PROB, BEGIN, END from WP_PURCHASE_PROB
        where SPU_WID = #{spuId} and rn = #{purchOrder} and is_spu = '1'
        order by ACTIVE_DUAL asc
    </select>

    <select id="getUserGrowthPathWithProduct" resultType="map">
        select ACTIVE_TYPE, ACTIVE_DUAL, trunc(PROB, 2) PROB, BEGIN, END from WP_PURCHASE_PROB
        where SPU_WID = #{spuId} and rn = #{purchOrder} and EBP_PRODUCT_ID = #{ebpProductId} and NEXT_EBP_PRODUCT_ID = #{nextEbpProductId} and is_spu = '1' order by ACTIVE_DUAL asc
    </select>

    <select id="getGrowthUser" resultType="map">
        select * from (
            select t.*, ROWNUM r_num from (select USER_ID, W_PRODUCT_SPU.SPU_NAME, EBP_PRODUCT_NAME, TO_NOW_DAYS, rn, ACTIVE_LEVEL, GROWTH_NODE_DATE from WP_USER_PATH, W_PRODUCT_SPU, W_PRODUCT_EBP
            where WP_USER_PATH.SPU_WID = W_PRODUCT_SPU.SPU_WID(+)
            and  WP_USER_PATH.EBP_PRODUCT_ID = W_PRODUCT_EBP.EBP_PRODUCT_ID(+)
            and WP_USER_PATH.SPU_WID = #{spuId} and WP_USER_PATH.EBP_PRODUCT_ID = #{ebpProductId} and NEXT_EBP_PRODUCT_ID = #{nextEbpProductId} and rn = #{purchOrder}) t
            where ROWNUM &lt;= #{end}
        ) where r_num &gt;= #{start}
    </select>

    <select id="getGrowthUserCount" resultType="int">
        select count(1) from WP_USER_PATH
        where SPU_WID = #{spuId} and EBP_PRODUCT_ID = #{ebpProductId} and NEXT_EBP_PRODUCT_ID = #{nextEbpProductId} and rn = #{purchOrder}
    </select>

    <select id="getPathSpu" resultType="map">
        select distinct WP_USER_PATH.SPU_WID, HANHOOGROWTH_DEV.W_PRODUCT_SPU.SPU_NAME
        from WP_USER_PATH,
        HANHOOGROWTH_DEV.W_PRODUCT_SPU
        where WP_USER_PATH.SPU_WID = HANHOOGROWTH_DEV.W_PRODUCT_SPU.SPU_WID(+)
    </select>

    <select id="getPathPurchOrder" resultType="string">
        WITH tt AS (SELECT SPU_WID, rn
        FROM HANHOOGROWTH_DEV.WP_PATH_RN_ACTIVE
        WHERE is_spu = 1
        GROUP BY SPU_WID, rn
        ORDER BY SPU_WID, rn)
        SELECT t1.RN
        FROM tt t1
        LEFT JOIN (SELECT v1.SPU_WID, max(v1.rn) max_rn FROM tt v1 GROUP BY v1.SPU_WID) t2 ON t1.SPU_WID = t2.SPU_WID
        WHERE t1.rn &lt; t2.MAX_RN and t1.SPU_WID = #{spuId}
    </select>
</mapper>