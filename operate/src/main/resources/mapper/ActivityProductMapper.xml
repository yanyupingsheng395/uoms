<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.linksteady.operate.dao.ActivityProductMapper">

    <resultMap id="base" type="com.linksteady.operate.domain.ActivityProduct">
        <result property="id" jdbcType="DECIMAL" column="ID"></result>
        <result property="headId" jdbcType="DECIMAL" column="HEAD_ID"></result>
        <result property="productId" jdbcType="DECIMAL" column="EPB_PRODUCT_ID"></result>
        <result property="minPrice" jdbcType="DECIMAL" column="MIN_PRICE"></result>
        <result property="productName" jdbcType="VARCHAR" column="PRODUCT_NAME"></result>
        <result property="formalPrice" jdbcType="DECIMAL" column="FORMAL_PRICE"></result>
        <result property="activityIntensity" jdbcType="DECIMAL" column="ACTIVITY_INTENSITY"></result>
        <result property="productUrl" jdbcType="VARCHAR" column="PRODUCT_URL"></result>
        <result property="productAttr" jdbcType="VARCHAR" column="PRODUCT_ATTR"></result>
        <result property="activityStage" jdbcType="VARCHAR" column="ACTIVITY_STAGE"></result>
    </resultMap>

    <select id="getActivityProductListPage" resultMap="base">
        select * from (
        select t.*, ROWNUM rn from (
          select ID, HEAD_ID, EPB_PRODUCT_ID, PRODUCT_NAME, MIN_PRICE, FORMAL_PRICE, ACTIVITY_INTENSITY, PRODUCT_URL, PRODUCT_ATTR from UO_OP_ACTIVITY_PRODUCT
          where HEAD_ID = #{headId} and ACTIVITY_STAGE = #{stage}
        <if test="productId != null and productId != ''">
            and EPB_PRODUCT_ID = #{productId}
        </if>
        <if test="productName != null and productName != ''">
            and product_name like concat('%', concat(#{productName}, '%'))
        </if>
        <if test="productAttr != null and productAttr != ''">
            and product_attr = #{productAttr}
        </if>
        order by HEAD_ID desc
        ) t where ROWNUM &lt;=#{end}
        ) where RN &gt;= #{start}
    </select>

    <select id="getCount" resultType="int">
        select count(1) from UO_OP_ACTIVITY_PRODUCT where HEAD_ID = #{headId} and ACTIVITY_STAGE = #{stage}
        <if test="productId != null and productId != ''">
            and EPB_PRODUCT_ID = #{productId}
        </if>
        <if test="productName != null and productName != ''">
            and product_name like concat('%', concat(#{productName}, '%'))
        </if>
        <if test="productAttr != null and productAttr != ''">
            and product_attr = #{productAttr}
        </if>
    </select>

    <insert id="saveDataList">
        insert into UO_OP_ACTIVITY_PRODUCT(head_id, EPB_PRODUCT_ID, user_count, product_price, prefer_type, prefer_value,
        product_act_price, min_price15, min_price30)
        <foreach item="item" collection="list" index="index" separator="union all">
            select #{item.headId},
            #{item.productId},#{item.userCount},#{item.productPrice},#{item.preferType},#{item.preferValue},#{item.productActPrice},
            #{item.minPrice15}, #{item.minPrice30} from dual
        </foreach>
    </insert>

    <insert id="insertProductList">
        insert into UO_OP_ACTIVITY_PRODUCT(head_id, EPB_PRODUCT_ID, user_count, product_price, prefer_value,
                                   product_act_price, min_price15, min_price30, prefer_type)
        select head_id,
               product_id,
               user_count,
               product_price,
               prefer_value,
               product_act_price,
               min_price15,
               min_price30,
               prefer_type
        from (select
                #{headId} head_id,
                REC_PROD_ID product_id,
                count(1) user_count,
                max(o.price) product_price,
                TRUNC(avg(refer_deno), 2) prefer_value,
                (max(o.price) - TRUNC(avg(refer_deno), 2)) product_act_price,
                w.FIFTEEN_LOWERST_PRICE min_price15,
                w.THIRTY_LOWERST_PRICE min_price30,
                case
                when (max(o.price) - TRUNC(avg(refer_deno), 2)) &lt;= 100 then
                'promote'
                else (case
                when max(o.price) &lt;= 370 then
                'discount'
                when max(o.PRICE) &gt; 370 then
                'reduce' end) end prefer_type
                from UO_OP_ACTIVITY_OPTION o,
                W_PRODUCT w
                where ((TOUCH_DT &lt;= to_date(#{startDate}, 'yyyy-mm-dd') and
                TOUCH_DT &lt;= to_date(#{endDate}, 'yyyy-mm-dd')) or (
                data_type = '2' and REMAIN_TIME &lt;= #{dayPeriod} + 90
                ))
                and o.rec_prod_id = w.product_id(+)
                group by rec_prod_id, w.FIFTEEN_LOWERST_PRICE, w.THIRTY_LOWERST_PRICE)
    </insert>

    <delete id="deleteByHeadId">
        delete from UO_OP_ACTIVITY_PRODUCT where head_id = #{headId}
    </delete>

    <insert id="saveActivityProduct">
        insert into UO_OP_ACTIVITY_PRODUCT(ID,HEAD_ID, EPB_PRODUCT_ID, PRODUCT_NAME, MIN_PRICE, FORMAL_PRICE, ACTIVITY_INTENSITY, PRODUCT_URL, PRODUCT_ATTR, ACTIVITY_STAGE)
        values (SEQ_ACTIVITY_PRODUCT_ID.nextval, #{headId}, #{productId}, #{productName}, #{minPrice}, #{formalPrice}, #{activityIntensity}, #{productUrl}, #{productAttr}, #{activityStage})
    </insert>

    <select id="getProductById" resultMap="base">
        select HEAD_ID, EPB_PRODUCT_ID, PRODUCT_NAME, MIN_PRICE, FORMAL_PRICE, ACTIVITY_INTENSITY, PRODUCT_URL, PRODUCT_ATTR, ACTIVITY_STAGE, ID from UO_OP_ACTIVITY_PRODUCT
        where ID = #{id}
    </select>

    <update id="updateActivityProduct">
        update UO_OP_ACTIVITY_PRODUCT
        set
        EPB_PRODUCT_ID = #{productId},
        PRODUCT_NAME = #{productName}, MIN_PRICE = #{minPrice}, FORMAL_PRICE = #{formalPrice}, ACTIVITY_INTENSITY = #{activityIntensity}, PRODUCT_URL = #{productUrl}, PRODUCT_ATTR = #{productAttr}, ACTIVITY_STAGE = #{activityStage}
        where ID = #{id}
    </update>

    <insert id="saveActivityProductList">
        insert all
        <foreach collection="list" item="item">
            into UO_OP_ACTIVITY_PRODUCT(ID,HEAD_ID, EPB_PRODUCT_ID, PRODUCT_NAME, MIN_PRICE, FORMAL_PRICE, ACTIVITY_INTENSITY, PRODUCT_ATTR, ACTIVITY_STAGE)
            values (SEQ_ACTIVITY_PRODUCT_ID.nextval, #{item.headId}, #{item.productId}, #{item.productName}, #{item.minPrice}, #{item.formalPrice}, #{item.activityIntensity}, #{item.productAttr}, #{item.activityStage})
        </foreach>
        select 1 from dual
    </insert>

    <delete id="deleteProduct">
        delete from UO_OP_ACTIVITY_PRODUCT where head_id = #{headId} and activity_stage = #{stage} and EPB_PRODUCT_ID in
        <foreach collection="productList" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
    </delete>

    <select id="validProductNum" resultType="int">
        select count(1) from UO_OP_ACTIVITY_PRODUCT
        where
        HEAD_ID = #{headId} and ACTIVITY_STAGE = #{stage}
    </select>
</mapper>