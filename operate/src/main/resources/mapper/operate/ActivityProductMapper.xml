<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.linksteady.operate.dao.ActivityProductMapper">

    <resultMap id="base" type="com.linksteady.operate.domain.ActivityProduct">
        <result property="id" jdbcType="DECIMAL" column="ID"/>
        <result property="headId" jdbcType="DECIMAL" column="HEAD_ID"/>
        <result property="productId" jdbcType="DECIMAL" column="EPB_PRODUCT_ID"/>
        <result property="minPrice" jdbcType="DECIMAL" column="MIN_PRICE"/>
        <result property="productName" jdbcType="VARCHAR" column="PRODUCT_NAME"/>
        <result property="formalPrice" jdbcType="DECIMAL" column="FORMAL_PRICE"/>
        <result property="productUrl" jdbcType="VARCHAR" column="PRODUCT_URL"/>
        <result property="checkFlag" jdbcType="VARCHAR" column="CHECK_FLAG"/>
        <result property="checkComments" jdbcType="VARCHAR" column="CHECK_COMMENTS"/>
        <result property="alikeProdId" jdbcType="VARCHAR" column="ALIKE_PROD_ID"/>
        <result property="groupId" jdbcType="VARCHAR" column="GROUP_ID"/>
        <result property="activityProfit" jdbcType="DECIMAL" column="ACTIVITY_PROFIT"/>
        <result property="activityPrice" jdbcType="DECIMAL" column="ACTIVITY_PRICE"/>
        <result property="discountSize" jdbcType="DECIMAL" column="DISCOUNT_SIZE"/>
        <result property="discountThreadhold" jdbcType="DECIMAL" column="DISCOUNT_THREADHOLD"/>
        <result property="discountDeno" jdbcType="DECIMAL" column="DISCOUNT_DENO"/>
        <result property="discountAmount" jdbcType="DECIMAL" column="DISCOUNT_AMOUNT"/>
        <result property="notifyProfit" jdbcType="DECIMAL" column="NOTIFY_PROFIT"/>
        <result property="duringProfit" jdbcType="DECIMAL" column="DURING_PROFIT"/>
        <result property="notifyMinPrice" jdbcType="DECIMAL" column="NOTIFY_MIN_PRICE"/>
        <result property="duringMinPrice" jdbcType="DECIMAL" column="DURING_MIN_PRICE"/>
        <result property="activityType" jdbcType="VARCHAR" column="ACTIVITY_TYPE"/>
        <result property="activityStage" jdbcType="VARCHAR" column="ACTIVITY_STAGE"/>
    </resultMap>

    <select id="getActivityProductListPage" resultMap="base">
        select distinct epb_product_id, product_name, check_flag, check_comments, group_id, notify_profit, notify_min_price, during_profit, during_min_price from (select t1.head_id,
        t1.epb_product_id,
        t1.product_name,
        t1.check_flag,
        t1.check_comments,
        t1.group_id,
        t1.activity_profit notify_profit,
        t1.min_price notify_min_price,
        t2.activity_profit during_profit,
        t2.min_price during_min_price
        from UO_OP_ACTIVITY_PRODUCT t1
        left join UO_OP_ACTIVITY_PRODUCT t2
        on t1.head_id = t2.head_id and t1.epb_product_id = t2.epb_product_id
        where t1.HEAD_ID = #{headId}::integer
        and t1.activity_stage = #{activityStage} and t1.activity_type = 'NOTIFY' or t2.activity_type = 'DURING') t
        where 1=1
        <if test="productId != null and productId != ''">
            and EPB_PRODUCT_ID = #{productId}
        </if>
        <if test="productName != null and productName != ''">
            and product_name like concat('%', #{productName}, '%')
        </if>
        <if test="groupId != null and groupId != ''">
            and group_id = #{groupId}::int4
        </if>
        order by CHECK_FLAG asc
        limit #{limit} offset #{offset}
    </select>

    <select id="getCount" resultType="int">
        select count(1) from UO_OP_ACTIVITY_PRODUCT where HEAD_ID = #{headId}::int4 and activity_stage = #{activityStage}
        <if test="productId != null and productId != ''">
            and EPB_PRODUCT_ID = #{productId}
        </if>
        <if test="productName != null and productName != ''">
            and product_name like concat('%', #{productName}, '%')
        </if>
        <if test="groupId != null and groupId != ''">
            and group_id = #{groupId}::int4
        </if>
    </select>

    <!--    <insert id="saveDataList">-->
    <!--        insert into UO_OP_ACTIVITY_PRODUCT(head_id, EPB_PRODUCT_ID, user_count, product_price, prefer_type,-->
    <!--        prefer_value,-->
    <!--        product_act_price, min_price15, min_price30)-->
    <!--        <foreach item="item" collection="list" index="index" separator="union all">-->
    <!--            select #{item.headId},-->
    <!--            #{item.productId},#{item.userCount},#{item.productPrice},#{item.preferType},#{item.preferValue},#{item.productActPrice},-->
    <!--            #{item.minPrice15}, #{item.minPrice30} from dual-->
    <!--        </foreach>-->
    <!--    </insert>-->

    <delete id="deleteByHeadId">
        delete
        from UO_OP_ACTIVITY_PRODUCT
        where head_id = #{headId}
    </delete>

    <insert id="saveActivityProduct">
        insert into UO_OP_ACTIVITY_PRODUCT(HEAD_ID, EPB_PRODUCT_ID, PRODUCT_NAME, ACTIVITY_PRICE, FORMAL_PRICE,
                                           PRODUCT_URL, GROUP_ID, discount_size, discount_threadhold,
                                           discount_deno, discount_amount, activity_profit, min_price, activity_type,
                                           activity_stage)
        values (#{headId}, #{productId}, #{productName}, #{activityPrice}, #{formalPrice}, #{productUrl},
                #{groupId}::int4, #{discountSize}, #{discountThreadhold}, #{discountDeno},
                #{discountAmount}, #{activityProfit}, #{minPrice}, #{activityType}, #{activityStage})
    </insert>

    <select id="getProductById" resultMap="base">
        select distinct EPB_PRODUCT_ID,
                        PRODUCT_NAME,
                        FORMAL_PRICE,
                        GROUP_ID,
                        ACTIVITY_PRICE,
                        DISCOUNT_SIZE,
                        DISCOUNT_THREADHOLD,
                        DISCOUNT_DENO,
                        DISCOUNT_AMOUNT,
                        activity_profit,
                        case when string_agg(activity_type, ',') = 'NOTIFY,DURING' or string_agg(activity_type, ',') = 'DURING,NOTIFY'
                                 then 'ALL' else string_agg(activity_type, ',') end activity_type
        from UO_OP_ACTIVITY_PRODUCT
        where head_id = #{headId}::integer
          and activity_stage = #{activityStage}
          and EPB_PRODUCT_ID = #{productId}
        group by EPB_PRODUCT_ID, PRODUCT_NAME, FORMAL_PRICE, GROUP_ID, ACTIVITY_PRICE, DISCOUNT_SIZE, DISCOUNT_THREADHOLD, DISCOUNT_DENO, DISCOUNT_AMOUNT, activity_profit
    </select>

    <update id="updateActivityProduct">
        update UO_OP_ACTIVITY_PRODUCT
        set PRODUCT_NAME        = #{productName},
            ACTIVITY_PRICE      = #{activityPrice},
            FORMAL_PRICE        = #{formalPrice},
            MIN_PRICE           = #{minPrice},
            GROUP_ID            = #{groupId}::int4,
            discount_size       = #{discountSize},
            discount_threadhold = #{discountThreadhold},
            discount_deno       = #{discountDeno},
            discount_amount     = #{discountAmount},
            activity_profit     = #{activityProfit}
        where ID = #{id}::int4
    </update>

    <insert id="saveActivityProductList">
        insert into UO_OP_ACTIVITY_PRODUCT(HEAD_ID, EPB_PRODUCT_ID, PRODUCT_NAME, MIN_PRICE, FORMAL_PRICE, PRODUCT_URL, GROUP_ID, discount_size,discount_threadhold,discount_deno,discount_amount,
        activity_profit, activity_price, activity_type, activity_stage) values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.headId}::int4,
            #{item.productId},
            #{item.productName},
            #{item.minPrice},
            #{item.formalPrice},
            #{item.productUrl},
            #{item.groupId}::int4,
            #{item.discountSize},#{item.discountThreadhold},#{item.discountDeno},#{item.discountAmount},
            #{item.activityProfit}, #{item.activityPrice}, #{item.activityType}, #{item.activityStage})
        </foreach>
    </insert>

    <delete id="deleteProduct">
        delete from UO_OP_ACTIVITY_PRODUCT where head_id = #{headId} and EPB_PRODUCT_ID in
        <foreach collection="productList" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
    </delete>

    <select id="validProductNum" resultType="int">
        select count(1)
        from UO_OP_ACTIVITY_PRODUCT
        where HEAD_ID = #{headId}::int4
    </select>

    <select id="getSameProductCount" resultType="int">
        select count(1) from UO_OP_ACTIVITY_PRODUCT
        where head_id = #{headId} and activity_stage = #{stage} and EPB_PRODUCT_ID in
        <foreach collection="productIdList" separator="," open="(" close=")" item="item">
            #{item}
        </foreach>
    </select>

    <delete id="deleteRepeatData">
        delete from UO_OP_ACTIVITY_PRODUCT where EPB_PRODUCT_ID in
        <foreach collection="productList" item="item" open="(" close=")" separator=",">
            #{item.productId}
        </foreach>
    </delete>


    <!--    <select id="geFirstProductInfo" resultMap="base">-->
    <!--        select HEAD_ID,-->
    <!--               EPB_PRODUCT_ID,-->
    <!--               PRODUCT_NAME,-->
    <!--               MIN_PRICE,-->
    <!--               FORMAL_PRICE,-->
    <!--               PRODUCT_URL,-->
    <!--               PRODUCT_ATTR,-->
    <!--               ACTIVITY_STAGE,-->
    <!--               ID-->
    <!--        from UO_OP_ACTIVITY_PRODUCT-->
    <!--        where HEAD_ID = #{headId}::int4-->
    <!--          and ACTIVITY_STAGE = #{stage}-->
    <!--    </select>-->

    <delete id="deleteData">
        delete
        from UO_OP_ACTIVITY_PRODUCT
        where HEAD_ID = #{headId}::int4
    </delete>

    <select id="getProductIdByHeadId" resultType="string">
        select EPB_PRODUCT_ID
        from UO_OP_ACTIVITY_PRODUCT
        where head_id = #{headId}::int4
    </select>

    <delete id="deleteDataList">
        delete from UO_OP_ACTIVITY_PRODUCT where head_id = #{headId}::integer and EPB_PRODUCT_ID in
        <foreach collection="productIdList" separator="," item="item" open="(" close=")">
            #{item}
        </foreach>
    </delete>

    <update id="updateValidInfo">
        update UO_OP_ACTIVITY_PRODUCT
        set CHECK_FLAG     = 'N',
            CHECK_COMMENTS = '活动商品在在售商品库中不存在'
        where HEAD_ID = #{headId}::int4
          and EPB_PRODUCT_ID in (
            with v1 as (select EPB_PRODUCT_ID
                        from UO_OP_ACTIVITY_PRODUCT t1,
                             (select distinct EBP_PRODUCT_ID from W_PRODUCT where UP_FLAG = 1) t2
                        where t1.EPB_PRODUCT_ID = t2.EBP_PRODUCT_ID::varchar
                          and t1.HEAD_ID = #{headId}::int4)
            select t3.EPB_PRODUCT_ID
            from UO_OP_ACTIVITY_PRODUCT t3
                     left join v1 on t3.EPB_PRODUCT_ID = v1.EPB_PRODUCT_ID::varchar
            where t3.HEAD_ID = #{headId}::int4
              and v1.EPB_PRODUCT_ID is null)
    </update>

    <update id="updateAllValidInfo">
        update UO_OP_ACTIVITY_PRODUCT
        set CHECK_FLAG     = 'Y',
            CHECK_COMMENTS = ''
        where HEAD_ID = #{headId}::int4
    </update>

    <select id="getCountByHeadId" resultType="int">
        select count(1)
        from UO_OP_ACTIVITY_PRODUCT
        where HEAD_ID = #{headId}::int4
    </select>

    <select id="validProduct" resultType="int">
        select count(1)
        from UO_OP_ACTIVITY_PRODUCT
        where HEAD_ID = #{headId}::int4
          and CHECK_FLAG = 'N'
    </select>

    <select id="getGroupIds" resultType="string">
        select DISTINCT GROUP_ID
        from UO_OP_ACTIVITY_PRODUCT
        where HEAD_ID = #{headId}::int4
          and CHECK_FLAG = 'Y'
    </select>

    <select id="checkProductId" resultType="int">
        select count(1) from uo_op_activity_product where head_id = #{headId}::integer and activity_stage = #{activityStage}
        <if test="activityType != null and activityType != 'ALL'">
            and activity_type = #{activityType}
        </if>
    </select>
</mapper>