<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.linksteady.operate.dao.ActivityUserGroupMapper">

    <resultMap id="base" type="com.linksteady.operate.domain.ActivityGroup">

        <result column="GROUP_ID" jdbcType="DECIMAL" property="groupId"></result>
        <result column="HEAD_ID" jdbcType="DECIMAL" property="headId"></result>
        <result column="GROUP_NAME" jdbcType="VARCHAR" property="groupName"></result>
        <result column="SMS_TEMPLATE_CODE" jdbcType="VARCHAR" property="smsTemplateCode"></result>
        <result column="TMP_CONTENT" jdbcType="VARCHAR" property="smsTemplateContent"></result>
        <result column="ACTIVITY_TYPE" jdbcType="VARCHAR" property="activityType"></result>
        <result column="CHECK_FLAG" jdbcType="VARCHAR" property="checkFlag"></result>
        <result column="CHECK_COMMENTS" jdbcType="VARCHAR" property="checkComments"></result>
        <result column="PROD_ACTIVITY_PROP" jdbcType="VARCHAR" property="prodActivityProp"></result>
    </resultMap>

    <select id="getCount" resultType="int">
        select count(1) from UO_OP_ACTIVITY_GROUP where HEAD_ID = #{headId} and ACTIVITY_STAGE = #{stage}
    </select>

    <select id="getUserGroupPage" resultMap="base">
        select * from (
          select ROWNUM rn, t.* from (
            select GROUP_ID, HEAD_ID, GROUP_NAME, IN_GROWTH_PATH, ACTIVE_LEVEL, TMP_CONTENT, TMP_CONTENT_NORMAL,GROUP_USER_CNT, GROWTH_USER_CNT, ACTIVE_USER_CNT, ACTIVITY_STAGE from UO_OP_ACTIVITY_GROUP
            left join UO_OP_ACTIVITY_TEMPLATE on SMS_TEMPLATE_CODE = TMP_CODE(+)
            where HEAD_ID = #{headId} and ACTIVITY_STAGE = #{stage}
          ) t where ROWNUM &lt; = #{end}
        ) where RN &gt;= #{start}
    </select>

    <select id="getUserGroupList" resultMap="base">
        select UO_OP_ACTIVITY_GROUP.GROUP_ID, GROUP_NAME, TMP_CONTENT, ACTIVITY_TYPE, SMS_TEMPLATE_CODE,CHECK_FLAG,CHECK_COMMENTS,PROD_ACTIVITY_PROP
        from UO_OP_ACTIVITY_GROUP, UO_OP_ACTIVITY_TEMPLATE
        where SMS_TEMPLATE_CODE = TMP_CODE(+) and HEAD_ID = #{headId} and ACTIVITY_STAGE = #{stage} order by group_id asc
    </select>

    <update id="updateGroupTemplate">
        update UO_OP_ACTIVITY_GROUP set SMS_TEMPLATE_CODE = #{code}
        where head_id = #{headId} and GROUP_ID = #{groupId} and ACTIVITY_STAGE = #{stage}
    </update>

    <insert id="saveGroupData">
        insert all
        <foreach collection="list" item="item">
            into UO_OP_ACTIVITY_GROUP(
            GROUP_ID,
            HEAD_ID,
            GROUP_NAME,
            ACTIVITY_STAGE,
            INSERT_DT,
            INSERT_BY,
            ACTIVITY_TYPE,
            PROD_ACTIVITY_PROP
            )
            values (#{item.groupId}, #{item.headId}, #{item.groupName}, #{item.activityStage}, #{item.insertDt}, #{item.insertBy}, #{item.activityType}, #{item.prodActivityProp})
        </foreach>
        select 1 from dual
    </insert>

    <select id="refrenceCount" resultType="int">
        select count(1) from UO_OP_ACTIVITY_GROUP where SMS_TEMPLATE_CODE = #{code}
    </select>

    <delete id="deleteData">
        delete from UO_OP_ACTIVITY_GROUP where head_id = #{headId}
    </delete>

    <update id="setSmsCode">
        update UO_OP_ACTIVITY_GROUP set SMS_TEMPLATE_CODE = #{tmpCode} where GROUP_ID = #{groupId} and HEAD_ID = #{headId}
        and ACTIVITY_TYPE = #{type} and ACTIVITY_STAGE = #{stage}
    </update>

    <select id="checkTmpIsUsed" resultType="int">
        select count(1) from UO_OP_ACTIVITY_GROUP t1, UO_OP_ACTIVITY_HEADER t2
        where t1.HEAD_ID = t2.HEAD_ID and (t2.PREHEAT_STATUS &lt;&gt; 'done' and t2.FORMAL_STATUS &lt;&gt; 'done') and t1.SMS_TEMPLATE_CODE = #{tmpCode}
    </select>

    <update id="validUserGroupNotify">
        update UO_OP_ACTIVITY_GROUP
        set CHECK_FLAG = (
            case
                when
                    GROUP_ID in (
                    select distinct GROUP_ID
                    from UO_OP_ACTIVITY_PRODUCT
                    where HEAD_ID = #{headId}
                ) and
                    SMS_TEMPLATE_CODE is null then 'N'
                when
                    GROUP_ID in (
                    select distinct GROUP_ID
                    from UO_OP_ACTIVITY_PRODUCT
                    where HEAD_ID = #{headId}
                ) and
                    SMS_TEMPLATE_CODE is not null then 'Y'
                else 'D' end
            ),
            CHECK_COMMENTS = (
                case
                    when
                        GROUP_ID in (
                        select distinct GROUP_ID
                        from UO_OP_ACTIVITY_PRODUCT
                        where HEAD_ID = #{headId}
                    ) and
                        SMS_TEMPLATE_CODE is null then '群组文案没有配置'
            else null end)
        where HEAD_ID = #{headId}
          and ACTIVITY_STAGE = #{stage} and ACTIVITY_TYPE = 'NOTIFY'
    </update>

    <update id="validUserGroupDuring">
        update UO_OP_ACTIVITY_GROUP set CHECK_FLAG = (
            case when SMS_TEMPLATE_CODE is null then 'N' else 'Y' end
        ),
        CHECK_COMMENTS = (
            case when SMS_TEMPLATE_CODE is null then '群组文案没有配置' else '' end
        )
        where HEAD_ID = #{headId} and ACTIVITY_STAGE = #{stage} and ACTIVITY_TYPE = 'DURING'
    </update>

    <select id="validGroupTemplate" resultType="int">
        select count(1) from UO_OP_ACTIVITY_GROUP
        where HEAD_ID = #{headId} and ACTIVITY_STAGE = #{stage} and ACTIVITY_TYPE = #{type} and SMS_TEMPLATE_CODE is null
    </select>

    <select id="validGroupTemplateWithGroup" resultType="int">
        select count(1) from UO_OP_ACTIVITY_GROUP
        where HEAD_ID = #{headId} and ACTIVITY_STAGE = #{stage} and ACTIVITY_TYPE = #{type}
        and GROUP_ID IN
        <foreach collection="groupIds" open="(" close=")" separator="," item="item">
            #{item}
        </foreach>
        and SMS_TEMPLATE_CODE is null
    </select>

    <update id="removeSmsSelected">
        update UO_OP_ACTIVITY_GROUP set SMS_TEMPLATE_CODE = null, CHECK_FLAG = 'N', CHECK_COMMENTS = '群组文案没有配置'
        where head_id = #{headId} and ACTIVITY_STAGE = #{stage} and GROUP_ID = #{groupId}
    </update>
</mapper>