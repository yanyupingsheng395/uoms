<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.linksteady.operate.dao.InsightMapper">

    <resultMap id="base" type="com.linksteady.common.domain.Ztree">
        <result column="id" jdbcType="VARCHAR" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="open" jdbcType="BOOLEAN" property="open"/>
    </resultMap>

    <resultMap id="userEffectMap" type="com.linksteady.operate.domain.InsightUserEffect">
        <result column="user_id" jdbcType="DECIMAL" property="userId"/>
        <result column="push_rn" jdbcType="DECIMAL" property="pushRn"/>
        <result column="push_date" jdbcType="TIMESTAMP" property="pushDate"/>
        <result column="push_date_str" jdbcType="VARCHAR" property="pushDateStr"/>
        <result column="growth_potential" jdbcType="VARCHAR" property="growthPotential"/>
        <result column="is_growth" jdbcType="VARCHAR" property="isGrowth"/>
        <result column="growth_push_cnt" jdbcType="DECIMAL" property="growthPushCnt"/>
        <result column="growth_dt" jdbcType="TIMESTAMP" property="growthDt"/>
        <result column="growth_dt_str" jdbcType="VARCHAR" property="growthDtStr"/>
        <result column="growth_v" jdbcType="VARCHAR" property="growthV"/>
    </resultMap>

    <select id="getSpuTree" resultMap="base">
        select SPU_WID id, SPU_NAME as name from W_PRODUCT_SPU order by spu_name asc
    </select>

    <select id="getProductTree" resultMap="base">
        select distinct ebp_product_id id, EBP_PRODUCT_NAME as name from w_product
        where SPU_WID = #{spuWid} order by EBP_PRODUCT_NAME asc
    </select>

    <select id="retentionInPurchaseTimesOfAll" resultType="map">
        --留存率随购买次数的变化
        WITH t1 AS (
        SELECT v1.USER_ID, v1.ORDER_DT, v1.ORDER_ID, v2.SPU_WID
        FROM W_ORDER_DETAILS v1
        LEFT JOIN W_PRODUCT v2
        ON v1.PRODUCT_ID = v2.PRODUCT_ID
        where v1.VALID_STATUS = 1
        and v2.SPU_WID = #{spuId}::int4
        GROUP BY v1.USER_ID, v1.ORDER_DT, v1.ORDER_ID, v2.SPU_WID
        ),
        t2 as
        (
        SELECT
        t1.USER_ID,
        t1.SPU_WID,
        DENSE_RANK () OVER (PARTITION BY t1.USER_ID,t1.SPU_WID
        ORDER BY t1.ORDER_DT,t1.ORDER_ID) spu_rn --用户在spu上的购买次数
        FROM t1
        ),
        t3 as (
        --查询当前SPU在每个购买次数上的留存率
        SELECT t2.SPU_WID, t2.SPU_RN,COUNT (1) leave_pearson FROM t2 GROUP BY t2.SPU_WID,t2.SPU_RN ORDER BY
        t2.SPU_WID,t2.SPU_RN
        )
        --spu wid,spu购买次数、留存率
        SELECT t3.SPU_WID,t3.SPU_RN,trunc(t3.leave_pearson/lag(t3.LEAVE_PEARSON,1,null) over(order by t3.SPU_RN),4)*100
        leave_rate FROM t3
    </select>

    <select id="retentionInPurchaseTimes" resultType="map">
        --留存率随购买次数的变化
        WITH t1 AS (
        SELECT v1.USER_ID, v1.ORDER_DT, v1.ORDER_ID, v2.SPU_WID
        FROM W_ORDER_DETAILS v1
        LEFT JOIN W_PRODUCT v2
        ON v1.PRODUCT_ID = v2.PRODUCT_ID
        where v1.VALID_STATUS = 1
        <if test="type == 'product'">
            and v2.ebp_product_id = #{id}
        </if>
        <if test="type == 'spu'">
            and v2.SPU_WID = #{id}
        </if>
        and v1.ORDER_DT_WID >= #{periodStartDt}
        GROUP BY v1.USER_ID, v1.ORDER_DT, v1.ORDER_ID, v2.SPU_WID
        ),

        t2 as
        (
        SELECT
        t1.USER_ID,
        t1.SPU_WID,
        DENSE_RANK () OVER (PARTITION BY t1.USER_ID,t1.SPU_WID
        ORDER BY t1.ORDER_DT,t1.ORDER_ID) spu_rn --用户在spu上的购买次数
        FROM t1
        ),
        t3 as (
        --查询当前SPU在每个购买次数上的留存率
        SELECT t2.SPU_WID, t2.SPU_RN,COUNT (1) leave_pearson FROM t2 GROUP BY t2.SPU_WID,t2.SPU_RN ORDER BY
        t2.SPU_WID,t2.SPU_RN
        )
        --spu wid,spu购买次数、留存率
        SELECT t3.SPU_WID,t3.SPU_RN,trunc(t3.leave_pearson::numeric/lag(t3.LEAVE_PEARSON,1,null) over(order by t3.SPU_RN),4)*100
        leave_rate FROM t3
    </select>

    <select id="unitPriceInPurchaseTimes" resultType="map">
      WITH SPU_PURCH AS (
      SELECT SPU_WID,
             USER_ID,
             ROW_NUMBER() OVER (PARTITION BY SPU_WID, USER_ID ORDER BY ORDER_DT ASC)     PURCH_TIMES,
             LAG(ORDER_DT, 1) OVER (PARTITION BY SPU_WID, USER_ID ORDER BY ORDER_DT ASC) PREV_PUR_DT,
             ORDER_DT,
             SPU_ORDER_FEE                                                               PURCH_FEE,
             QUANTITY,
             ORDER_ID
      FROM (
             SELECT t2.SPU_WID,
                    t1.USER_ID,
                    ORDER_ID,
                    ORDER_DT,
                    SUM(t1.PRICE * t1.QUANTITY) SPU_ORDER_FEE, SUM(QUANTITY) QUANTITY
             FROM W_ORDER_DETAILS t1, W_PRODUCT t2
               WHERE t1.PRODUCT_ID = t2.PRODUCT_ID
                <if test="type == 'product'">
                    and t2.ebp_product_id = #{id}
                </if>
                <if test="type == 'spu'">
                    and t2.SPU_WID = #{id}
                </if>
               AND t1.VALID_STATUS = 1
               AND t1.PRICE > 0
               and t1.ORDER_DT_WID >= #{periodStartDt}
               GROUP BY t2.SPU_WID, t1.USER_ID, ORDER_ID, ORDER_DT
           ) u
    ),
         PURCH_CATE_NUM AS (
           SELECT ORDER_ID, COUNT(DISTINCT SPU_WID) CATE_NUM
           FROM SPU_PURCH
             GROUP BY ORDER_ID
         )
    SELECT SPU_WID, PURCH_TIMES, UPRICE
    FROM (
           SELECT SPU_WID,
                  PURCH_TIMES,
                  TRUNC(SUM(PURCH_FEE) / SUM(QUANTITY), 2) UPRICE
           FROM SPU_PURCH v1,
                PURCH_CATE_NUM v2
             WHERE
                v1.ORDER_ID = v2.ORDER_ID
             GROUP BY
                SPU_WID,
                PURCH_TIMES
         ) f order by PURCH_TIMES asc
    </select>

    <select id="joinRateInPurchaseTimes" resultType="map">
        WITH SPU_PURCH AS (
          SELECT SPU_WID,
                 USER_ID,
                 ROW_NUMBER() OVER (PARTITION BY SPU_WID, USER_ID ORDER BY ORDER_DT ASC)     PURCH_TIMES,
                 LAG(ORDER_DT, 1) OVER (PARTITION BY SPU_WID, USER_ID ORDER BY ORDER_DT ASC) PREV_PUR_DT,
                 ORDER_DT,
                 SPU_ORDER_FEE                                                               PURCH_FEE,
                 QUANTITY,
                 ORDER_ID
          FROM (
                 SELECT t2.SPU_WID,
                        t1.USER_ID,
                        ORDER_ID,
                        ORDER_DT,
                        SUM(t1.PRICE * t1.QUANTITY) SPU_ORDER_FEE,
                        SUM(QUANTITY) QUANTITY
                 FROM W_ORDER_DETAILS t1, W_PRODUCT t2
                   WHERE t1.PRODUCT_ID = t2.PRODUCT_ID
                    <if test="type == 'product'">
                        and t2.ebp_product_id = #{id}
                    </if>
                    <if test="type == 'spu'">
                        and t2.SPU_WID = #{id}
                    </if>
                   AND t1.VALID_STATUS = 1
                   AND t1.PRICE > 0
                   and t1.ORDER_DT_WID >= #{periodStartDt}
        GROUP BY t2.SPU_WID, t1.USER_ID, ORDER_ID, ORDER_DT
               ) v1
        ),
             PURCH_CATE_NUM AS (
               SELECT ORDER_ID, COUNT(DISTINCT SPU_WID) CATE_NUM
               FROM SPU_PURCH
                 GROUP BY ORDER_ID
             )
        SELECT SPU_WID, PURCH_TIMES, JOINT
        FROM (
               SELECT SPU_WID,
                      PURCH_TIMES,
                      TRUNC(SUM(QUANTITY) / COUNT(*), 2) JOINT
               FROM SPU_PURCH v1
                 GROUP BY
                    SPU_WID,
                    PURCH_TIMES
             ) v2 order by PURCH_TIMES asc
    </select>

    <select id="spuCategoryInPurchaseTimes" resultType="map">
        WITH SPU_PURCH AS(
        SELECT SPU_WID,
        USER_ID,
        ROW_NUMBER() OVER(PARTITION BY SPU_WID, USER_ID ORDER BY ORDER_DT ASC) PURCH_TIMES,
        LAG(ORDER_DT, 1) OVER(PARTITION BY SPU_WID, USER_ID ORDER BY ORDER_DT ASC) PREV_PUR_DT,
        ORDER_DT,
        SPU_ORDER_FEE  PURCH_FEE,
        QUANTITY,
        ORDER_ID
        FROM (
        SELECT
        t2.SPU_WID,t1.USER_ID,ORDER_ID,ORDER_DT,SUM(t1.PRICE * t1.QUANTITY) SPU_ORDER_FEE, SUM(QUANTITY) QUANTITY
        FROM W_ORDER_DETAILS t1, W_PRODUCT t2
        WHERE t1.PRODUCT_ID = t2.PRODUCT_ID
        AND t1.VALID_STATUS = 1
        AND t1.PRICE > 0
        and t1.ORDER_DT_WID >= #{periodStartDt}
        GROUP BY t2.SPU_WID,t1.USER_ID,ORDER_ID,ORDER_DT
        ) tmp
        ),
        PURCH_CATE_NUM AS(
        SELECT ORDER_ID, COUNT(DISTINCT SPU_WID) CATE_NUM
        FROM SPU_PURCH
        GROUP BY ORDER_ID
        )
        SELECT SPU_WID, PURCH_TIMES,AVG_CATE_NUM
        FROM (
        SELECT SPU_WID,
        PURCH_TIMES,
        TRUNC(SUM(v2.CATE_NUM)/COUNT(*),2) AVG_CATE_NUM
        FROM SPU_PURCH v1,PURCH_CATE_NUM v2
        WHERE v1.ORDER_ID = v2.ORDER_ID
        and SPU_WID = #{id}
        GROUP BY SPU_WID,PURCH_TIMES
        ) tmp2 order by PURCH_TIMES asc
    </select>


    <select id="productCategoryInPurchaseTimes" resultType="map">
        WITH SPU_PURCH AS(
        SELECT EBP_PRODUCT_ID,
        USER_ID,
        ROW_NUMBER() OVER(PARTITION BY EBP_PRODUCT_ID, USER_ID ORDER BY ORDER_DT ASC) PURCH_TIMES,
        LAG(ORDER_DT, 1) OVER(PARTITION BY EBP_PRODUCT_ID, USER_ID ORDER BY ORDER_DT ASC) PREV_PUR_DT,
        ORDER_DT,
        SPU_ORDER_FEE  PURCH_FEE,
        QUANTITY,
        ORDER_ID
        FROM (
        SELECT
        t2.EBP_PRODUCT_ID,t1.USER_ID,ORDER_ID,ORDER_DT,SUM(t1.PRICE * t1.QUANTITY) SPU_ORDER_FEE, SUM(QUANTITY) QUANTITY
        FROM W_ORDER_DETAILS t1, W_PRODUCT t2
        WHERE t1.PRODUCT_ID = t2.PRODUCT_ID
        AND t1.VALID_STATUS = 1
        AND t1.PRICE > 0
        and t1.ORDER_DT_WID >= #{periodStartDt}
        GROUP BY t2.EBP_PRODUCT_ID,t1.USER_ID,ORDER_ID,ORDER_DT
        ) tmp
        ),
        PURCH_CATE_NUM AS(
        SELECT ORDER_ID, COUNT(DISTINCT EBP_PRODUCT_ID) CATE_NUM
        FROM SPU_PURCH
        GROUP BY ORDER_ID
        )
        SELECT EBP_PRODUCT_ID, PURCH_TIMES,AVG_CATE_NUM
        FROM (
        SELECT EBP_PRODUCT_ID,
        PURCH_TIMES,
        TRUNC(SUM(v2.CATE_NUM)/COUNT(*),2) AVG_CATE_NUM,
        FROM SPU_PURCH v1,PURCH_CATE_NUM v2
        WHERE v1.ORDER_ID = v2.ORDER_ID
        and EBP_PRODUCT_ID = #{id}
        GROUP BY EBP_PRODUCT_ID,PURCH_TIMES
        ) tmp2 order by PURCH_TIMES asc
    </select>



    <select id="periodInPurchaseTimes" resultType="map">
        WITH SPU_PURCH AS(
        SELECT SPU_WID,
        USER_ID,
        ROW_NUMBER() OVER(PARTITION BY SPU_WID, USER_ID ORDER BY ORDER_DT ASC) PURCH_TIMES,
        LAG(ORDER_DT, 1) OVER(PARTITION BY SPU_WID, USER_ID ORDER BY ORDER_DT ASC) PREV_PUR_DT,
        ORDER_DT,
        SPU_ORDER_FEE  PURCH_FEE,
        QUANTITY,
        ORDER_ID
        FROM (
        SELECT
        t2.SPU_WID,t1.USER_ID,ORDER_ID,ORDER_DT,SUM(t1.PRICE * t1.QUANTITY) SPU_ORDER_FEE,SUM(QUANTITY) QUANTITY
        FROM W_ORDER_DETAILS t1, W_PRODUCT t2
        WHERE t1.PRODUCT_ID = t2.PRODUCT_ID
        <if test="type == 'product'">
            and t2.ebp_product_id = #{id}
        </if>
        <if test="type == 'spu'">
            and t2.SPU_WID = #{id}
        </if>
        AND t1.VALID_STATUS = 1
        AND t1.PRICE > 0
        and t1.ORDER_DT_WID >= #{periodStartDt}
        GROUP BY t2.SPU_WID,t1.USER_ID,ORDER_ID,ORDER_DT) tmp),
        PUR_GAP_RN AS(
        SELECT SPU_WID,
        PURCH_TIMES,
        USER_ID,
        date_part('day',ORDER_DT-PREV_PUR_DT)  PUR_GAP,
        ROW_NUMBER() OVER(PARTITION BY SPU_WID, PURCH_TIMES ORDER BY date_part('day',ORDER_DT-PREV_PUR_DT) ASC) RN
        FROM SPU_PURCH
        WHERE date_part('day',ORDER_DT-PREV_PUR_DT) > 0
        )
        select * from (
        SELECT v1.SPU_WID, v1.PURCH_TIMES,TRUNC(AVG(v2.PUR_GAP)::numeric,2) AVG_PUR_GAP FROM(
        SELECT  SPU_WID,PURCH_TIMES,COUNT(*) TTL_NUM FROM PUR_GAP_RN GROUP BY  SPU_WID,PURCH_TIMES

        ) v1,PUR_GAP_RN v2
        WHERE v1.SPU_WID = v2.SPU_WID
        AND v1.PURCH_TIMES = v2.PURCH_TIMES
        AND v2.RN &lt;=  CEIL(v1.TTL_NUM * 0.8)
        GROUP BY v1.SPU_WID,v1.PURCH_TIMES
        ) tmp2 order by PURCH_TIMES asc
    </select>

    <select id="findSpuByPurchOrder" resultType="map">
        select SPU_WID id, SPU_NAME as name from W_PRODUCT_SPU order by spu_name asc
    </select>

    <!--获取top5人数的商品与spu关系图-->
    <select id="getSpuRelation" resultType="map">
        with v1 as (
        SELECT spu_wid,
               EBP_PRODUCT_ID::varchar,
        count(1) cnt
        FROM WP_USER_PATH
        WHERE SPU_WID = #{spuId}
        AND rn = #{purchOrder}
        and next_ebp_product_id is not null
        GROUP BY spu_wid, EBP_PRODUCT_ID
        order by cnt desc
        ),
        v2 as (
        SELECT row_number() over (partition by v1.spu_wid ORDER BY v1.cnt DESC)                      row_num,
        v1.SPU_WID,
        v1.EBP_PRODUCT_ID,
        v1.cnt                                                                                product_cnt,
        sum(v1.cnt) over ( partition BY v1.spu_wid )                                          spu_cnt,
        t2.spu_name                                                                           spu_name,
        (CASE WHEN EBP_PRODUCT_NAME IS NULL THEN v1.EBP_PRODUCT_ID ELSE EBP_PRODUCT_NAME END) EBP_PRODUCT_NAME
        FROM v1
        left join w_product_spu t2 on v1.SPU_WID = t2.SPU_WID
        left join W_PRODUCT_EBP t3 on v1.EBP_PRODUCT_ID::int8 = t3.EBP_PRODUCT_ID
        order by v1.cnt desc
        ),
        v3 as (
        select SPU_WID,
        row_num,
        (CASE WHEN row_num &lt;= 5 THEN EBP_PRODUCT_ID ELSE '-1' END)   EBP_PRODUCT_ID,
        PRODUCT_CNT,
        SPU_CNT,
        SPU_NAME,
        (CASE WHEN row_num &lt;= 5 THEN EBP_PRODUCT_NAME ELSE '其他' END) EBP_PRODUCT_NAME
        from v2
        )
        select case when EBP_PRODUCT_NAME = '其他' then 1 else 0 end order_col, t.*
        from (select SPU_WID, SPU_NAME, EBP_PRODUCT_ID, EBP_PRODUCT_NAME, SUM(PRODUCT_CNT) PRODUCT_CNT, spu_cnt
              from v3
              GROUP BY SPU_WID, SPU_NAME, EBP_PRODUCT_ID, EBP_PRODUCT_NAME, spu_cnt
              order by PRODUCT_CNT desc) t order by order_col asc
    </select>

    <select id="getProductConvertRate" resultType="map">
        with g1 as (
        SELECT spu_wid, EBP_PRODUCT_ID,count(1) next_product_cnt, NEXT_EBP_PRODUCT_ID
        FROM WP_USER_PATH
        WHERE SPU_WID = #{spuId}
        AND rn = #{purchOrder}
        and EBP_PRODUCT_ID = #{productId}
        and NEXT_EBP_PRODUCT_ID is not null
        GROUP BY spu_wid,EBP_PRODUCT_ID,
        NEXT_EBP_PRODUCT_ID
        ),
        g2 as (
        SELECT spu_wid, next_product_cnt, NEXT_EBP_PRODUCT_ID, sum(next_product_cnt) over ( partition BY g1.spu_wid) product_cnt
        FROM g1
        ),
        g3 as (
        select NEXT_EBP_PRODUCT_ID,
        next_product_cnt,
        product_cnt,
        trunc((next_product_cnt / product_cnt) * 100, 2) convert_rate
        from g2
        order by next_product_cnt desc
        )
        SELECT NEXT_EBP_PRODUCT_ID, EBP_PRODUCT_NAME, SUM(next_product_cnt), SUM(convert_rate) convert_rate
        FROM (
        SELECT (CASE WHEN EBP_PRODUCT_NAME &lt;&gt; '其他' THEN NEXT_EBP_PRODUCT_ID::varchar ELSE '-1' END) NEXT_EBP_PRODUCT_ID,
        (CASE
        WHEN EBP_PRODUCT_NAME IS NULL THEN NEXT_EBP_PRODUCT_ID::varchar
        ELSE EBP_PRODUCT_NAME END)                                             EBP_PRODUCT_NAME,
        next_product_cnt,
        convert_rate
        FROM (
        select NEXT_EBP_PRODUCT_ID, row_number() over (order by NEXT_EBP_PRODUCT_ID) as row_num,
        (CASE WHEN row_number() over (order by NEXT_EBP_PRODUCT_ID)  &lt;= 5 THEN EBP_PRODUCT_NAME ELSE '其他' END) EBP_PRODUCT_NAME,
        next_product_cnt,
        convert_rate
        from g3,
        W_PRODUCT_EBP t1
        where g3.NEXT_EBP_PRODUCT_ID = t1.EBP_PRODUCT_ID) tmp) tmp1
        GROUP BY NEXT_EBP_PRODUCT_ID, EBP_PRODUCT_NAME
        order by convert_rate desc
    </select>

    <select id="getUserGrowthPathWithSpu" resultType="map">
        select ACTIVE_TYPE, ACTIVE_DUAL, trunc(PROB * 100, 2) PROB, dual_begin, dual_end from WP_PURCHASE_PROB
        where SPU_WID = #{spuId} and rn = #{purchOrder} and is_spu = 1
        order by ACTIVE_DUAL asc
    </select>

    <select id="getUserGrowthPathWithProduct" resultType="map">
        select ACTIVE_TYPE, ACTIVE_DUAL, trunc(PROB * 100, 2) PROB, dual_begin, dual_end from WP_PURCHASE_PROB
        where SPU_WID = #{spuId} and rn = #{purchOrder} and EBP_PRODUCT_ID = #{ebpProductId} and NEXT_EBP_PRODUCT_ID = #{nextEbpProductId} and is_spu = 0 order by ACTIVE_DUAL asc
    </select>

    <select id="getGrowthUser" resultType="map">
        select USER_ID, W_PRODUCT_SPU.SPU_NAME, W_PRODUCT_EBP.EBP_PRODUCT_NAME, t2.EBP_PRODUCT_NAME NEXT_EBP_PRODUCT_NAME, TO_NOW_DAYS, rn, ACTIVE_LEVEL, to_char(GROWTH_NODE_DATE, 'yyyy-mm-dd') GROWTH_NODE_DATE
        from WP_USER_PATH
        left join W_PRODUCT_SPU on WP_USER_PATH.SPU_WID = W_PRODUCT_SPU.SPU_WID
        left join W_PRODUCT_EBP on WP_USER_PATH.EBP_PRODUCT_ID = W_PRODUCT_EBP.EBP_PRODUCT_ID
        left join W_PRODUCT_EBP t2 on WP_USER_PATH.NEXT_EBP_PRODUCT_ID = t2.EBP_PRODUCT_ID
        where WP_USER_PATH.SPU_WID = #{spuId} and WP_USER_PATH.EBP_PRODUCT_ID = #{ebpProductId}
        and NEXT_EBP_PRODUCT_ID = #{nextEbpProductId}
        and rn = #{purchOrder} order by WP_USER_PATH.ACTIVE_LEVEL,WP_USER_PATH.USER_ID,WP_USER_PATH.EBP_PRODUCT_ID,WP_USER_PATH.SPU_WID asc
        limit #{limit} offset #{offset}
    </select>

    <select id="getGrowthUserCount" resultType="int">
        select count(1) from WP_USER_PATH
        where SPU_WID = #{spuId} and EBP_PRODUCT_ID = #{ebpProductId} and NEXT_EBP_PRODUCT_ID = #{nextEbpProductId} and rn = #{purchOrder}
    </select>

    <select id="getPathSpu" resultType="map">
        select distinct WP_USER_PATH.SPU_WID, W_PRODUCT_SPU.SPU_NAME
        from WP_USER_PATH left join W_PRODUCT_SPU
        on WP_USER_PATH.SPU_WID = W_PRODUCT_SPU.SPU_WID
    </select>

    <select id="getPathPurchOrder" resultType="string">
        WITH tt AS (SELECT SPU_WID, rn
        FROM WP_USER_PATH
        GROUP BY SPU_WID, rn
        ORDER BY SPU_WID, rn)
        SELECT t1.RN
        FROM tt t1
        LEFT JOIN (SELECT v1.SPU_WID, max(v1.rn) max_rn FROM tt v1 GROUP BY v1.SPU_WID) t2 ON t1.SPU_WID = t2.SPU_WID
        WHERE t1.rn &lt; t2.MAX_RN and t1.SPU_WID = #{spuId}
    </select>

    <select id="getUserSpu" resultType="map">
        select distinct WP_USER_PATH.SPU_WID, W_PRODUCT_SPU.SPU_NAME
        from WP_USER_PATH,
             W_PRODUCT_SPU,
             W_PRODUCT
        where
        WP_USER_PATH.SPU_WID = W_PRODUCT_SPU.SPU_WID and W_PRODUCT.SPU_WID = WP_USER_PATH.SPU_WID and USER_ID = #{userId}
    </select>

    <select id="getUserBuyOrder" resultType="string">
        select max(rn) from WP_USER_PATH where USER_ID = #{userId} and SPU_WID = #{spuId}
    </select>

    <select id="getEbpProductIdByUserId" resultType="map">
        select t0.EBP_PRODUCT_ID::varchar,
               NEXT_EBP_PRODUCT_ID::varchar,
               t1.EBP_PRODUCT_NAME EBP_PRODUCT_NAME,
               t2.EBP_PRODUCT_NAME NEXT_EBP_PRODUCT_NAME
              from WP_USER_PATH t0
        left join W_PRODUCT_EBP t1 on t0.EBP_PRODUCT_ID = t1.EBP_PRODUCT_ID
        left join W_PRODUCT_EBP t2 on t0.NEXT_EBP_PRODUCT_ID = t2.EBP_PRODUCT_ID
        where USER_ID = #{userId} and RN = #{buyOrder} and t0.spu_wid = #{spuId}
    </select>

    <select id="getLastBuyDt" resultType="string">
        select ORDER_DT_WID from WP_USER_PATH t0,
        (select max(rn) max_rn from WP_USER_PATH where USER_ID = #{userId} and SPU_WID = #{spuId}) t1
        where USER_ID = #{userId} and SPU_WID = #{spuId} and t0.rn = t1.max_rn
    </select>

    <select id="getUserGrowthPathPointWithSpu" resultType="map">
        with v1 as (
            select t1.rn, t1.spu_Wid
            from WP_USER_PATH t1, (select max(rn) rn from WP_USER_PATH where  SPU_WID = #{spuId} and USER_ID = #{userId}) t2
            where SPU_WID = #{spuId} and USER_ID = #{userId} and t1.rn = t2.rn
        )
        select ACTIVE_TYPE, ACTIVE_DUAL, trunc(PROB * 100, 2) PROB, dual_begin, dual_end,v1.rn from WP_PURCHASE_PROB t1,v1
        where t1.SPU_WID = v1.spu_Wid and t1.rn = v1.rn and is_spu = '1'
        order by ACTIVE_DUAL asc
    </select>

    <select id="getUserGrowthPathPointWithProduct" resultType="map">
        with v1 as (
            select EBP_PRODUCT_ID, NEXT_EBP_PRODUCT_ID, t1.rn, t1.spu_Wid
            from WP_USER_PATH t1, (select max(rn) rn from WP_USER_PATH where  SPU_WID = '4' and USER_ID = #{userId}) t2
            where SPU_WID = #{spuId} and USER_ID = #{userId} and t1.rn = t2.rn
        )
        select ACTIVE_TYPE, ACTIVE_DUAL, trunc(PROB * 100, 2) PROB, BEGIN, END from WP_PURCHASE_PROB t1, v1
        where t1.SPU_WID = v1.spu_Wid and t1.rn = v1.rn and t1.EBP_PRODUCT_ID = v1.EBP_PRODUCT_ID and t1.NEXT_EBP_PRODUCT_ID = v1.NEXT_EBP_PRODUCT_ID and is_spu = '0' order by ACTIVE_DUAL asc
    </select>

    <select id="getUserValueWithSpu" resultType="java.util.LinkedHashMap">
        select case
                   when USER_LEVEL = 'ULC_01' then '高价值低敏感'
                   when USER_LEVEL = 'ULC_02' then '高价值较敏感'
                   when USER_LEVEL = 'ULC_03' then '中价值高敏感'
                   when USER_LEVEL = 'ULC_04' then '低价值低敏感'
                   when USER_LEVEL = 'ULC_05' then '低价值高敏感' end USER_LEVEL,
               CONTRIBUTE_LEVEL,
               VALUE_POTENTIAL_LEVEL,
               PRICE_SENSE_LEVEL
        from PP_USER_SPU_VALUE where SPU_WID = #{spuId} and user_id = #{userId}
    </select>

    <select id="getUserValueWithSpuCount" resultType="int">
        select count(1) from PP_USER_SPU_VALUE where SPU_WID = #{spuId}
    </select>

    <select id="getConvertDate" resultType="java.util.LinkedHashMap">
        -- 第一个图
        SELECT
          -- 星期
         v2.weekday_name,
         --转化小时
         to_char( v1.order_dt, 'hh24' ) converion_hour,
         count( 1 ) cnt
        FROM
          --订单表
         w_order_details v1 --日期维表
         LEFT JOIN w_date v2 ON v1.order_dt_wid = v2.row_wid
         --商品表
         LEFT JOIN ( SELECT PRODUCT_ID, spu_wid FROM w_product ) v3 ON v1.product_id = v3.product_id
        WHERE
         v1.valid_status = 1
          --限制spu
         and v1.USER_ID = #{userId}
        GROUP BY
         v2.weekday_name,
         to_char( v1.order_dt, 'hh24' )
    </select>

    <select id="getPushDate" resultType="java.util.LinkedHashMap">
        -- 推送小时
        SELECT
        --星期
        v2.weekday_name,
        -- 推送小时
        to_char( v1.push_date, 'hh24' ) push_hour,
        --次数
        count( 1 ) cnt
        FROM
        -- 日推送转化表
        uo_op_daily_convert_detail v1
        --日期维表
        LEFT JOIN w_date v2
        ON to_char( v1.push_date, 'yyyymmdd' )::int8 = v2.row_wid
        left JOIN
        (select PRODUCT_ID,spu_wid from w_product) v3
        on v1.rec_prod_id = v3.product_id
        WHERE
        --限制spu
        v1.USER_ID = #{userId}::varchar
        GROUP BY
        v2.weekday_name,
        to_char( v1.push_date, 'hh24' ),
        v3.spu_wid
        ORDER BY v3.SPU_WID
    </select>

    <select id="getPushAndConvertDate" resultType="java.util.LinkedHashMap">
        -- 推送小时
        SELECT
         --星期
         v2.weekday_name,
          -- 推送小时
         to_char( v1.push_date, 'hh24' ) push_hour,
          --次数
         count( 1 ) cnt
        FROM
          -- 日推送转化表
         uo_op_daily_convert_detail v1
          --日期维表
         LEFT JOIN w_date v2
         ON to_char( v1.push_date, 'yyyymmdd' )::int8 = v2.row_wid
         left JOIN
         (select PRODUCT_ID,spu_wid from w_product) v3
         on v1.rec_prod_id = v3.product_id
        WHERE
           --限制spu
          v1.USER_ID = #{userId}::varchar
           -- 是否转化
          and v1.is_conversion = '1'
        GROUP BY
         v2.weekday_name,
         to_char( v1.push_date, 'hh24' ),
         v3.spu_wid
        ORDER BY v3.SPU_WID
    </select>

    <select id="getGrowthData" resultType="map">
        select distinct growth_type, growth_series_type, t2.rn
        from wp_user_path t1,
             (select max(rn) rn
              from WP_USER_PATH
              where USER_ID = #{userId}::integer
                and SPU_WID = #{spuId}::integer) t2
        where USER_ID = #{userId}::integer
          and SPU_WID = #{spuId}::integer
          and t1.rn = t2.rn
        group by growth_type, growth_series_type, t2.rn
    </select>

    <select id="getGrowthTableDataCount" resultType="int">
        select count(1) from wp_push_user_effect where 1=1
        <if test="startDt != '' and startDt != null and endDt != '' and endDt != null">
            and to_date(to_char( push_date, 'yyyy-mm' ), 'yyyy-mm') &lt;= to_date(#{endDt}, 'yyyy-mm') and to_date(to_char( push_date, 'yyyy-mm' ), 'yyyy-mm') &gt;= to_date(#{startDt}, 'yyyy-mm')
        </if>
        <if test="userId != '' and userId != null">
            and user_id = #{userId}::integer
        </if>
    </select>

    <select id="getGrowthTableDataList" resultMap="userEffectMap">
        select user_id, push_rn, push_date, growth_potential, is_growth, growth_rn, growth_push_cnt, growth_dt, growth_v from wp_push_user_effect where 1=1
        <if test="startDt != '' and startDt != null and endDt != '' and endDt != null">
            and to_date(to_char( push_date, 'yyyy-mm' ), 'yyyy-mm') &lt;= to_date(#{endDt}, 'yyyy-mm') and to_date(to_char( push_date, 'yyyy-mm' ), 'yyyy-mm') &gt;= to_date(#{startDt}, 'yyyy-mm')
        </if>
        <if test="userId != '' and userId != null">
            and user_id = #{userId}::integer
        </if>
        order by user_id asc
        limit #{limit} offset #{offset}
    </select>

    <select id="allGrowthP" resultType="map">
        select growth_potential value_, to_char(push_date, 'yyyymm') date_ from wp_push_user_effect
        <if test="startDt != '' and startDt != null and endDt != '' and endDt != null">
            where to_date(to_char( push_date, 'yyyy-mm' ), 'yyyy-mm') &lt;= to_date(#{endDt}, 'yyyy-mm') and to_date(to_char( push_date, 'yyyy-mm' ), 'yyyy-mm') &gt;= to_date(#{startDt}, 'yyyy-mm')
        </if>
    </select>

    <select id="allGrowthV" resultType="map">
        select growth_v value_, to_char(growth_dt, 'yyyymm') date_ from wp_push_user_effect
        where growth_dt is not null
        <if test="startDt != '' and startDt != null and endDt != '' and endDt != null">
            and to_date(to_char( growth_dt, 'yyyy-mm' ), 'yyyy-mm') &lt;= to_date(#{endDt}, 'yyyy-mm') and to_date(to_char( growth_dt, 'yyyy-mm' ), 'yyyy-mm') &gt;= to_date(#{startDt}, 'yyyy-mm')
        </if>
    </select>

    <select id="singleGrowthP" resultType="map">
        select growth_potential value_, push_rn rn from wp_push_user_effect where user_id = #{userId}::integer and push_rn is not null and growth_potential is not null
        order by push_rn asc
    </select>

    <select id="singleGrowthV" resultType="map">
        select growth_v value_, growth_rn rn from wp_push_user_effect where user_id = #{userId}::integer
        and growth_v is not null and growth_rn is not null
        order by growth_rn asc
    </select>
</mapper>