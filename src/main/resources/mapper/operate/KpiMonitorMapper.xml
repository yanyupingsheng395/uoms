<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.linksteady.operate.dao.KpiMonitorMapper">

    <resultMap id="BaseResultMap" type="com.linksteady.operate.domain.WeekInfo">
        <!--
          WARNING - @mbg.generated
        -->
        <result column="YEAR" jdbcType="DECIMAL" property="year" />
        <result column="WEEK_WID" jdbcType="DECIMAL" property="weekWid" />
        <result column="WEEK_OF_YARE_NAME" jdbcType="VARCHAR" property="weekOfYareName" />
        <result column="WEEK_BEGIN_WID" jdbcType="DECIMAL" property="weekBeginWid" />
        <result column="WEEK_END_WID" jdbcType="DECIMAL" property="weekEndWid" />
    </resultMap>

    <resultMap id="datePeriodKpiMap" type="com.linksteady.operate.domain.DatePeriodKpi">
        <result column="MIN_MONTH" property="minPeriod" jdbcType="DECIMAL"></result>
        <result column="BUY_MONTH" property="buyPeriod" jdbcType="DECIMAL"></result>
        <result column="C_USERS" property="kpiValue" jdbcType="DECIMAL"></result>
        <result column="UPRICE" property="uprice" jdbcType="DECIMAL"></result>
    </resultMap>

    <!-- 获取间隔月的留存率数据 -->
    <select id="getRetainDMonth" resultType="map">
        with g1 as
        (
        SELECT
             dt.month buy_month,
             t.user_id,
             t.is_fp
        FROM w_Orders t,w_date dt
        where t.valid_status=1
        and t.order_dt_wid=dt.row_wid
        and dt.month &gt;= #{beginDt}
        and dt.month &lt;= #{endDt}
        ),
        g2 as(  --每月新增的用户
        select g1.user_id,g1.buy_month from g1 where g1.is_fp='Y' group by g1.user_id,g1.buy_month
        ),
        g3 as(
        --如果用户一个月有多单，则只计算一次
        SELECT
            DISTINCT
            g1.user_id,
            g1.buy_month,
            g2.buy_month min_month, --这个用户在那个月新增的
            months_between(to_date(g1.buy_month,'yyyymm'), to_date(g2.buy_month,'yyyymm')) month_diff
        FROM g1,g2 where g1.user_id=g2.user_id
        ),
        rt as(
        select
        min_month,
        sum(case when month_diff = 0 then 1 else 0 end) month_0,
        sum(case when month_diff = 1 then 1 else 0 end) month_1,
        sum(case when month_diff = 2 then 1 else 0 end) month_2,
        sum(case when month_diff = 3 then 1 else 0 end) month_3,
        sum(case when month_diff = 4 then 1 else 0 end) month_4,
        sum(case when month_diff = 5 then 1 else 0 end) month_5,
        sum(case when month_diff = 6 then 1 else 0 end) month_6,
        sum(case when month_diff = 7 then 1 else 0 end) month_7,
        sum(case when month_diff = 8 then 1 else 0 end) month_8,
        sum(case when month_diff = 9 then 1 else 0 end) month_9,
        sum(case when month_diff = 10 then 1 else 0 end) month_10,
        sum(case when month_diff = 11 then 1 else 0 end) month_11,
        sum(case when month_diff = 12 then 1 else 0 end) month_12
        from g3 group  by min_month
        ),
        rt2 as
        (select min_month month_id,
        month_0 month0,
        (case when month_0=0 then 0 else round(month_1/month_0,4)*100 end) month1,
        (case when month_0=0 then 0 else round(month_2/month_0,4)*100 end) month2,
        (case when month_0=0 then 0 else round(month_3/month_0,4)*100 end) month3,
        (case when month_0=0 then 0 else round(month_4/month_0,4)*100 end) month4,
        (case when month_0=0 then 0 else round(month_5/month_0,4)*100 end) month5,
        (case when month_0=0 then 0 else round(month_6/month_0,4)*100 end) month6,
        (case when month_0=0 then 0 else round(month_7/month_0,4)*100 end) month7,
        (case when month_0=0 then 0 else round(month_8/month_0,4)*100 end) month8,
        (case when month_0=0 then 0 else round(month_9/month_0,4)*100 end) month9,
        (case when month_0=0 then 0 else round(month_10/month_0,4)*100 end) month10,
        (case when month_0=0 then 0 else round(month_11/month_0,4)*100 end) month11,
        (case when month_0=0 then 0 else round(month_12/month_0,4)*100 end) month12
        from rt)
        select
        dt.month_id,
        nvl(rt2.month0,0) total_user,
        nvl(rt2.month1,0) month1,
        nvl(rt2.month2,0) month2,
        nvl(rt2.month3,0) month3,
        nvl(rt2.month4,0) month4,
        nvl(rt2.month5,0) month5,
        nvl(rt2.month6,0) month6,
        nvl(rt2.month7,0) month7,
        nvl(rt2.month8,0) month8,
        nvl(rt2.month9,0) month9,
        nvl(rt2.month10,0) month10,
        nvl(rt2.month11,0) month11,
        nvl(rt2.month12,0) month12
        from rt2 right join
        (select month_id from w_month  where month_id &gt;= #{beginDt} and month_id &lt;= #{endDt}) dt
        on rt2.month_id=dt.month_id
        order by dt.month_id
    </select>

    <!--按SPU获取用户的间隔月留存率数据-->
    <select id="getRetainBySpuDMonth" resultType="map">
        with g1 as
        (
        SELECT
        dt.month buy_month,
        t.user_id,
        t.is_fp
        FROM w_Order_Details t,w_date dt,(SELECT PRODUCT_ID,SPU_WID FROM W_PRODUCT) spu
        where t.valid_status=1
        and t.product_id=spu.product_id
        and t.order_dt_wid=dt.row_wid
        and dt.month &gt;= #{beginDt}
        and dt.month &lt;= #{endDt}
        ),
        g2 as(  --每月新增的用户及其新新增的月份
        select g1.user_id,g1.buy_month min_month from g1 where g1.is_fp='Y' group by g1.user_id,g1.buy_month
        ),
        g3 as(
        --如果用户一个月有多单，则只计算一次
        SELECT
        DISTINCT
        g1.user_id,
        g1.buy_month,
        g2.min_month,
        months_between(to_date(g1.buy_month,'yyyymm'), to_date(g2.min_month,'yyyymm')) month_diff
        FROM g1,g2 where g1.user_id=g2.user_id
        ),
        rt as(
        select
        min_month,
        sum(case when month_diff = 0 then 1 else 0 end) month_0,
        sum(case when month_diff = 1 then 1 else 0 end) month_1,
        sum(case when month_diff = 2 then 1 else 0 end) month_2,
        sum(case when month_diff = 3 then 1 else 0 end) month_3,
        sum(case when month_diff = 4 then 1 else 0 end) month_4,
        sum(case when month_diff = 5 then 1 else 0 end) month_5,
        sum(case when month_diff = 6 then 1 else 0 end) month_6,
        sum(case when month_diff = 7 then 1 else 0 end) month_7,
        sum(case when month_diff = 8 then 1 else 0 end) month_8,
        sum(case when month_diff = 9 then 1 else 0 end) month_9,
        sum(case when month_diff = 10 then 1 else 0 end) month_10,
        sum(case when month_diff = 11 then 1 else 0 end) month_11,
        sum(case when month_diff = 12 then 1 else 0 end) month_12
        from g3  group  by min_month),
        rt2 as
        (select min_month month_id,
        month_0 month0,
        (case when month_0=0 then 0 else round(month_1/month_0,4)*100 end) month1,
        (case when month_0=0 then 0 else round(month_2/month_0,4)*100 end) month2,
        (case when month_0=0 then 0 else round(month_3/month_0,4)*100 end) month3,
        (case when month_0=0 then 0 else round(month_4/month_0,4)*100 end) month4,
        (case when month_0=0 then 0 else round(month_5/month_0,4)*100 end) month5,
        (case when month_0=0 then 0 else round(month_6/month_0,4)*100 end) month6,
        (case when month_0=0 then 0 else round(month_7/month_0,4)*100 end) month7,
        (case when month_0=0 then 0 else round(month_8/month_0,4)*100 end) month8,
        (case when month_0=0 then 0 else round(month_9/month_0,4)*100 end) month9,
        (case when month_0=0 then 0 else round(month_10/month_0,4)*100 end) month10,
        (case when month_0=0 then 0 else round(month_11/month_0,4)*100 end) month11,
        (case when month_0=0 then 0 else round(month_12/month_0,4)*100 end) month12
        from rt)
        select
        dt.month_id,
        nvl(rt2.month0,0) total_user,
        nvl(rt2.month1,0) month1,
        nvl(rt2.month2,0) month2,
        nvl(rt2.month3,0) month3,
        nvl(rt2.month4,0) month4,
        nvl(rt2.month5,0) month5,
        nvl(rt2.month6,0) month6,
        nvl(rt2.month7,0) month7,
        nvl(rt2.month8,0) month8,
        nvl(rt2.month9,0) month9,
        nvl(rt2.month10,0) month10,
        nvl(rt2.month11,0) month11,
        nvl(rt2.month12,0) month12
        from rt2 right join
        (select month_id from w_month  where month_id &gt;= #{beginDt} and month_id &lt;= #{endDt}) dt
        on rt2.month_id=dt.month_id
        order by dt.month_id
    </select>

    <!-- 按间隔月看留存用户数 -->
    <select id="getRetainUserCountDMonth" resultType="map">
        with g1 as
        (
        SELECT
        dt.month buy_month,
        t.user_id
        FROM w_Orders t,w_date dt
        where t.valid_status=1
        and t.order_dt_wid=dt.row_wid
        and dt.month &gt;= #{beginDt}
        and dt.month &lt;= #{endDt}
        ),
        g2 as(
        SELECT
        min(buy_month) min_month,
        user_id
        FROM g1
        group by user_id
        ),
        g3 as(
        SELECT
        DISTINCT
        g1.user_id,
        g1.buy_month,
        g2.min_month,
        months_between(to_date(g1.buy_month,'yyyymm'), to_date(g2.min_month,'yyyymm')) month_diff
        FROM g1,g2 where g1.user_id=g2.user_id
        ),
        rt as(
        select
        min_month month_id,
        sum(case when month_diff = 0 then 1 else 0 end) month_0,
        sum(case when month_diff = 1 then 1 else 0 end) month_1,
        sum(case when month_diff = 2 then 1 else 0 end) month_2,
        sum(case when month_diff = 3 then 1 else 0 end) month_3,
        sum(case when month_diff = 4 then 1 else 0 end) month_4,
        sum(case when month_diff = 5 then 1 else 0 end) month_5,
        sum(case when month_diff = 6 then 1 else 0 end) month_6,
        sum(case when month_diff = 7 then 1 else 0 end) month_7,
        sum(case when month_diff = 8 then 1 else 0 end) month_8,
        sum(case when month_diff = 9 then 1 else 0 end) month_9,
        sum(case when month_diff = 10 then 1 else 0 end) month_10,
        sum(case when month_diff = 11 then 1 else 0 end) month_11,
        sum(case when month_diff = 12 then 1 else 0 end) month_12
        from g3 group  by min_month
        )
        select
        dt.month_id,
        nvl(rt.month_0,0) total_user,
        nvl(rt.month_1,0) month1,
        nvl(rt.month_2,0) month2,
        nvl(rt.month_3,0) month3,
        nvl(rt.month_4,0) month4,
        nvl(rt.month_5,0) month5,
        nvl(rt.month_6,0) month6,
        nvl(rt.month_7,0) month7,
        nvl(rt.month_8,0) month8,
        nvl(rt.month_9,0) month9,
        nvl(rt.month_10,0) month10,
        nvl(rt.month_11,0) month11,
        nvl(rt.month_12,0) month12
        from rt right join
        (select month_id from w_month  where month_id  &gt;= #{beginDt} and month_id &lt;= #{endDt}) dt
        on rt.month_id=dt.month_id
        order by dt.month_id
    </select>

    <!-- 按间隔月查看某个spu下的留存用户数 -->
    <select id="getRetainUserCountDMonthBySpu" resultType="map">
        with g1 as
        (
        SELECT
        dt.month buy_month,
        t.user_id
        FROM w_Order_Details t,w_date dt,(SELECT PRODUCT_ID,SPU_WID FROM W_PRODUCT) spu
        where t.valid_status=1
        and t.product_id=spu.product_id
        and t.order_dt_wid=dt.row_wid
        and dt.month &gt;= #{beginDt}
        and dt.month &lt;= #{endDt}
        AND SPU.SPU_WID= #{spuId}
        ),
        g2 as(
        SELECT
        min(buy_month) min_month,
        user_id
        FROM g1
        group by user_id
        ),
        g3 as(
        SELECT
        DISTINCT
        g1.user_id,
        g1.buy_month,
        g2.min_month,
        months_between(to_date(g1.buy_month,'yyyymm'), to_date(g2.min_month,'yyyymm')) month_diff
        FROM g1,g2 where g1.user_id=g2.user_id
        ),
        rt as(
        select
        min_month month_id,
        sum(case when month_diff = 0 then 1 else 0 end) month_0,
        sum(case when month_diff = 1 then 1 else 0 end) month_1,
        sum(case when month_diff = 2 then 1 else 0 end) month_2,
        sum(case when month_diff = 3 then 1 else 0 end) month_3,
        sum(case when month_diff = 4 then 1 else 0 end) month_4,
        sum(case when month_diff = 5 then 1 else 0 end) month_5,
        sum(case when month_diff = 6 then 1 else 0 end) month_6,
        sum(case when month_diff = 7 then 1 else 0 end) month_7,
        sum(case when month_diff = 8 then 1 else 0 end) month_8,
        sum(case when month_diff = 9 then 1 else 0 end) month_9,
        sum(case when month_diff = 10 then 1 else 0 end) month_10,
        sum(case when month_diff = 11 then 1 else 0 end) month_11,
        sum(case when month_diff = 12 then 1 else 0 end) month_12
        from g3 group  by min_month
        )
        select
        dt.month_id,
        nvl(rt.month_0,0) total_user,
        nvl(rt.month_1,0) month1,
        nvl(rt.month_2,0) month2,
        nvl(rt.month_3,0) month3,
        nvl(rt.month_4,0) month4,
        nvl(rt.month_5,0) month5,
        nvl(rt.month_6,0) month6,
        nvl(rt.month_7,0) month7,
        nvl(rt.month_8,0) month8,
        nvl(rt.month_9,0) month9,
        nvl(rt.month_10,0) month10,
        nvl(rt.month_11,0) month11,
        nvl(rt.month_12,0) month12
        from rt right join
        (select month_id from w_month  where month_id &gt;=#{beginDt} and month_id &lt;=#{endDt}) dt
        on rt.month_id=dt.month_id
        order by dt.month_id
    </select>

    <!-- 获取所有的周 -->
    <!--<select id="getWeekList" resultMap="BaseResultMap">-->
        <!--SELECT DISTINCT T.YEAR,-->
        <!--T.WEEK_WID,-->
        <!--T.WEEK_OF_YARE_NAME,-->
        <!--T.WEEK_BEGIN_WID,-->
        <!--T.WEEK_END_WID-->
        <!--FROM W_DATE T-->
        <!--WHERE ROW_WID &gt; #{beginWid}-->
        <!--AND ROW_WID &lt;= #{endWid}-->
        <!--ORDER BY WEEK_WID ASC-->
    <!--</select>-->

    <select id="getGMV" resultType="map">
        SELECT
        W_DATE.DAY_SHORT_NAME PERIOD_NAME,
        SUM (W_ORDER_DETAILS.PRICE*QUANTITY-W_ORDER_DETAILS.DISCOUNT) TOTAL_GMV,  --总的gmv金额
        SUM(CASE WHEN W_ORDER_DETAILS.IS_FP='Y' THEN W_ORDER_DETAILS.PRICE*QUANTITY-W_ORDER_DETAILS.DISCOUNT ELSE 0 END) FP_GMV, --首购金额
        SUM(CASE WHEN W_ORDER_DETAILS.IS_FP='N' THEN W_ORDER_DETAILS.PRICE*QUANTITY-W_ORDER_DETAILS.DISCOUNT ELSE 0 END) RP_GMV  --复购金额

        FROM
        W_ORDER_DETAILS JOIN W_DATE ON W_ORDER_DETAILS.ORDER_DT_WID=W_DATE.ROW_WID
        JOIN (SELECT W_PRODUCT_SPU.SPU_WID,W_PRODUCT.PRODUCT_ID FROM W_PRODUCT_SPU JOIN W_PRODUCT
        ON W_PRODUCT_SPU.SPU_WID=W_PRODUCT.SPU_WID) SPU ON W_ORDER_DETAILS.PRODUCT_ID=SPU.PRODUCT_ID
        WHERE
        W_ORDER_DETAILS.VALID_STATUS = 1
        AND SPU.SPU_WID=#{spuId}
        AND W_DATE.ROW_WID &gt;= #{startDt}
        AND W_DATE.ROW_WID &lt;= #{endDt}
        GROUP BY W_DATE.DAY_SHORT_NAME
        ORDER BY W_DATE.DAY_SHORT_NAME ASC
    </select>

    <select id="getTradeUser" resultType="map">
        SELECT
        W_DATE.DAY_SHORT_NAME PERIOD_NAME,
        COUNT(DISTINCT W_ORDER_DETAILS.USER_ID) TOTAL_CNT,
        COUNT(DISTINCT CASE WHEN W_ORDER_DETAILS.IS_FP='Y' THEN W_ORDER_DETAILS.USER_ID END) FP_CNT,
        COUNT(DISTINCT CASE WHEN W_ORDER_DETAILS.IS_FP='N' THEN W_ORDER_DETAILS.USER_ID END) RP_CNT
        FROM
        W_ORDER_DETAILS JOIN W_DATE ON W_ORDER_DETAILS.ORDER_DT_WID=W_DATE.ROW_WID
        JOIN (SELECT W_PRODUCT_SPU.SPU_WID,W_PRODUCT.PRODUCT_ID FROM W_PRODUCT_SPU JOIN W_PRODUCT
        ON W_PRODUCT_SPU.SPU_WID=W_PRODUCT.SPU_WID) SPU ON W_ORDER_DETAILS.PRODUCT_ID=SPU.PRODUCT_ID
        WHERE
        W_ORDER_DETAILS.VALID_STATUS = 1
        AND SPU.SPU_WID=#{spuId}
        AND W_DATE.ROW_WID &gt;=#{startDt}
        AND W_DATE.ROW_WID &lt;=#{endDt}
        GROUP BY W_DATE.DAY_SHORT_NAME
    </select>

    <select id="getAvgCsPrice" resultType="map">
        WITH g1 as(
        SELECT
        W_DATE.DAY_SHORT_NAME PERIOD_NAME,
        W_ORDER_DETAILS.PRICE,
        W_ORDER_DETAILS.QUANTITY,
        W_ORDER_DETAILS.DISCOUNT,
        NVL(W_ORDER_DETAILS.PRICE*QUANTITY-W_ORDER_DETAILS.DISCOUNT,0) GMV,
        W_ORDER_DETAILS.IS_FP,
        W_ORDER_DETAILS.USER_ID
        FROM
        W_ORDER_DETAILS JOIN W_DATE ON W_ORDER_DETAILS.ORDER_DT_WID=W_DATE.ROW_WID
        JOIN (SELECT W_PRODUCT_SPU.SPU_WID,W_PRODUCT.PRODUCT_ID FROM W_PRODUCT_SPU JOIN W_PRODUCT
        ON W_PRODUCT_SPU.SPU_WID=W_PRODUCT.SPU_WID) SPU ON W_ORDER_DETAILS.PRODUCT_ID=SPU.PRODUCT_ID
        WHERE
        W_ORDER_DETAILS.VALID_STATUS = 1
        AND SPU.SPU_WID=#{spuId}
        AND W_DATE.ROW_WID &gt;=#{startDt}
        AND W_DATE.ROW_WID &lt;=#{endDt}
        ),
        g2 as(
        SELECT
        g1.PERIOD_NAME,
        COUNT(DISTINCT g1.USER_ID) TOTAL_CNT,
        COUNT(DISTINCT CASE WHEN g1.IS_FP='Y' THEN g1.USER_ID END) FP_CNT,
        COUNT(DISTINCT CASE WHEN g1.IS_FP='N' THEN g1.USER_ID END) RP_CNT,
        SUM(gmv) TOTAL_GMV,  --总的gmv金额
        SUM(CASE WHEN g1.IS_FP='Y' THEN GMV ELSE 0 END) FP_GMV, --首购金额
        SUM(CASE WHEN g1.IS_FP='N' THEN GMV ELSE 0 END) RP_GMV  --复购金额
        FROM g1
        GROUP BY g1.PERIOD_NAME
        )
        SELECT
        g2.PERIOD_NAME,
        (CASE WHEN g2.TOTAL_CNT=0 THEN 0 ELSE TRUNC(g2.TOTAL_GMV/g2.TOTAL_CNT,2) END) PRICE,
        (CASE WHEN g2.FP_CNT=0 THEN 0 ELSE TRUNC(g2.FP_GMV/g2.FP_CNT,2) END) FP_PRICE,
        (CASE WHEN g2.RP_CNT=0 THEN 0 ELSE TRUNC(g2.RP_GMV/g2.RP_CNT,2) END) RP_PRICE
        FROM g2 ORDER BY g2.PERIOD_NAME ASC
    </select>

    <!-- 按自然月获取留存率 -->
    <select id="getRetainMonth" resultMap="datePeriodKpiMap">
        WITH g1 AS
        (
        SELECT MONTH BUY_MONTH,
        T.USER_ID,
        T.IS_FP
        FROM W_ORDERS T,W_DATE DT  WHERE t.valid_status=1
        AND DT.MONTH &gt;= #{beginDt}
        AND DT.MONTH &lt;= #{endDt}
        AND T.ORDER_DT_WID=DT.ROW_WID
        ),
        g2 as(  --每月新增的用户
        SELECT G1.USER_ID,G1.BUY_MONTH MIN_MONTH FROM G1 WHERE G1.IS_FP='Y' GROUP BY G1.USER_ID,G1.BUY_MONTH
        ),
        --每个用户 及其购买月份
        g3 as(
        SELECT BUY_MONTH,
        USER_ID
        FROM g1
        GROUP BY BUY_MONTH,USER_ID
        )
        SELECT g2.MIN_MONTH,g3.BUY_MONTH,COUNT(*) C_USERS FROM  g2,g3
        WHERE g2.USER_ID = g3.USER_ID
        GROUP BY g2.MIN_MONTH,g3.BUY_MONTH
        ORDER BY g2.MIN_MONTH,g3.BUY_MONTH
    </select>

    <!-- 计算某个SPU下的留存用户数 -->
    <select id="getRetainMonthBySpu" resultMap="datePeriodKpiMap">
        WITH g1 AS
        (
        SELECT MONTH BUY_MONTH,
        T.USER_ID,
        T.IS_FP
        FROM W_ORDER_DETAILS T,W_DATE DT,(SELECT PRODUCT_ID,SPU_WID FROM W_PRODUCT) spu
        WHERE
        T.ORDER_DT_WID=DT.ROW_WID
        AND T.PRODUCT_ID=SPU.PRODUCT_ID
        AND t.valid_status=1
        AND DT.MONTH &gt;=#{beginDt}
        AND DT.MONTH &lt;=#{endDt}
        AND SPU.SPU_WID= #{spuId}
        ),
        g2 as(  --每月新增的用户
        SELECT G1.USER_ID,G1.BUY_MONTH MIN_MONTH FROM G1 WHERE G1.IS_FP='Y' GROUP BY G1.USER_ID,G1.BUY_MONTH
        ),
        --每个用户 及其购买月份
        g3 as(
        SELECT BUY_MONTH,
        USER_ID
        FROM g1
        GROUP BY BUY_MONTH,USER_ID
        )
        SELECT g2.MIN_MONTH,g3.BUY_MONTH,COUNT(*) C_USERS FROM  g2,g3
        WHERE g2.USER_ID = g3.USER_ID
        GROUP BY g2.MIN_MONTH,g3.BUY_MONTH
        ORDER BY g2.MIN_MONTH,g3.BUY_MONTH
    </select>


    <!-- 计算某个spu下的自然月的留存率 -->
    <select id="getRetainBySpuMonth" resultMap="datePeriodKpiMap">
        WITH g1 AS
        (
        SELECT MONTH BUY_MONTH,
        T.USER_ID,
        T.IS_FP
        FROM W_ORDER_DETAILS T,W_DATE DT,(SELECT PRODUCT_ID,SPU_WID FROM W_PRODUCT) spu
        WHERE
        T.ORDER_DT_WID=DT.ROW_WID
        AND T.PRODUCT_ID=SPU.PRODUCT_ID
        AND t.valid_status=1
        AND DT.MONTH &gt;= #{beginDt}
        AND DT.MONTH &lt;= #{endDt}
        AND SPU.SPU_WID= #{spuId}
        ),
        g2 as(  --每月新增的用户
        SELECT G1.USER_ID,G1.BUY_MONTH MIN_MONTH FROM G1 WHERE G1.IS_FP='Y' GROUP BY G1.USER_ID,G1.BUY_MONTH
        ),
        --每个用户 及其购买月份
        g3 as(
        SELECT BUY_MONTH,
        USER_ID
        FROM g1
        GROUP BY BUY_MONTH,USER_ID
        )
        SELECT g2.MIN_MONTH,g3.BUY_MONTH,COUNT(*) C_USERS FROM  g2,g3
        WHERE g2.USER_ID = g3.USER_ID
        GROUP BY g2.MIN_MONTH,g3.BUY_MONTH
        ORDER BY g2.MIN_MONTH,g3.BUY_MONTH
    </select>

    <!-- 计算流失率的 间隔月  -->
    <select id="getLossUserRateDMonth" resultType="map">
        with g1 as
        (
        SELECT
        dt.month buy_month,
        t.user_id,
        is_fp
        FROM w_Orders t,w_date dt
        where t.valid_status=1
        and t.order_dt_wid=dt.row_wid
        and dt.month &gt;= #{beginDt}
        and dt.month &lt;= #{endDt}
        ),
        g2 as(  --每月新增的用户
        SELECT G1.USER_ID,G1.BUY_MONTH MIN_MONTH FROM G1 WHERE G1.IS_FP='Y' GROUP BY G1.USER_ID,G1.BUY_MONTH
        ),
        g3 as(
        --如果用户一个月有多单，则只计算一次
        SELECT
        DISTINCT
        g1.user_id,
        g1.buy_month,
        g2.min_month,
        months_between(to_date(g1.buy_month,'yyyymm'), to_date(g2.min_month,'yyyymm')) month_diff
        FROM g1,g2 where g1.user_id=g2.user_id
        ),
        rt as(
        select
        min_month,
        sum(case when month_diff = 0 then 1 else 0 end) month_0,
        sum(case when month_diff = 1 then 1 else 0 end) month_1,
        sum(case when month_diff = 2 then 1 else 0 end) month_2,
        sum(case when month_diff = 3 then 1 else 0 end) month_3,
        sum(case when month_diff = 4 then 1 else 0 end) month_4,
        sum(case when month_diff = 5 then 1 else 0 end) month_5,
        sum(case when month_diff = 6 then 1 else 0 end) month_6,
        sum(case when month_diff = 7 then 1 else 0 end) month_7,
        sum(case when month_diff = 8 then 1 else 0 end) month_8,
        sum(case when month_diff = 9 then 1 else 0 end) month_9,
        sum(case when month_diff = 10 then 1 else 0 end) month_10,
        sum(case when month_diff = 11 then 1 else 0 end) month_11,
        sum(case when month_diff = 12 then 1 else 0 end) month_12
        from g3 group  by min_month
        ),
        rt2 as
        (select min_month month_id,
        month_0 month0,
        (case when month_0=0 then 0 else round((month_0 - month_1)/month_0,4)*100 end) month1,
        (case when month_0=0 then 0 else round((month_0 - month_2)/month_0,4)*100 end) month2,
        (case when month_0=0 then 0 else round((month_0 - month_3)/month_0,4)*100 end) month3,
        (case when month_0=0 then 0 else round((month_0 - month_4)/month_0,4)*100 end) month4,
        (case when month_0=0 then 0 else round((month_0 - month_5)/month_0,4)*100 end) month5,
        (case when month_0=0 then 0 else round((month_0 - month_6)/month_0,4)*100 end) month6,
        (case when month_0=0 then 0 else round((month_0 - month_7)/month_0,4)*100 end) month7,
        (case when month_0=0 then 0 else round((month_0 - month_8)/month_0,4)*100 end) month8,
        (case when month_0=0 then 0 else round((month_0 - month_9)/month_0,4)*100 end) month9,
        (case when month_0=0 then 0 else round((month_0 - month_10)/month_0,4)*100 end) month10,
        (case when month_0=0 then 0 else round((month_0 - month_11)/month_0,4)*100 end) month11,
        (case when month_0=0 then 0 else round((month_0 - month_12)/month_0,4)*100 end) month12
        from rt)
        select
        dt.month_id,
        nvl(rt2.month0,0) total_user,
        nvl(rt2.month1,0) month1,
        nvl(rt2.month2,0) month2,
        nvl(rt2.month3,0) month3,
        nvl(rt2.month4,0) month4,
        nvl(rt2.month5,0) month5,
        nvl(rt2.month6,0) month6,
        nvl(rt2.month7,0) month7,
        nvl(rt2.month8,0) month8,
        nvl(rt2.month9,0) month9,
        nvl(rt2.month10,0) month10,
        nvl(rt2.month11,0) month11,
        nvl(rt2.month12,0) month12
        from rt2 right join
        (select month_id from w_month  where month_id &gt;= #{beginDt} and month_id &lt;= #{endDt}) dt
        on rt2.month_id=dt.month_id
        order by dt.month_id
    </select>

    <!--计算某个SPU下的流失率 间隔月-->
    <select id="getLossUserRateDMonthBySpu" resultType="map">
        with g1 as
        (
        SELECT
        dt.month buy_month,
        t.user_id,
        t.is_fp
        FROM w_Order_Details t,w_date dt,(SELECT PRODUCT_ID,SPU_WID FROM W_PRODUCT) spu
        where t.valid_status=1
        and t.product_id=spu.product_id
        and t.order_dt_wid=dt.row_wid
        and dt.month &gt;= #{beginDt}
        and dt.month &lt;= #{endDt}
        AND SPU.SPU_WID= #{spuId}
        ),
        g2 as(  --每月新增的用户
        SELECT G1.USER_ID,G1.BUY_MONTH MIN_MONTH FROM G1 WHERE G1.IS_FP='Y' GROUP BY G1.USER_ID,G1.BUY_MONTH
        ),
        g3 as(
        --如果用户一个月有多单，则只计算一次
        SELECT
        DISTINCT
        g1.user_id,
        g1.buy_month,
        g2.min_month,
        months_between(to_date(g1.buy_month,'yyyymm'), to_date(g2.min_month,'yyyymm')) month_diff
        FROM g1,g2 where g1.user_id=g2.user_id
        ),
        rt as(
        select
        min_month,
        sum(case when month_diff = 0 then 1 else 0 end) month_0,
        sum(case when month_diff = 1 then 1 else 0 end) month_1,
        sum(case when month_diff = 2 then 1 else 0 end) month_2,
        sum(case when month_diff = 3 then 1 else 0 end) month_3,
        sum(case when month_diff = 4 then 1 else 0 end) month_4,
        sum(case when month_diff = 5 then 1 else 0 end) month_5,
        sum(case when month_diff = 6 then 1 else 0 end) month_6,
        sum(case when month_diff = 7 then 1 else 0 end) month_7,
        sum(case when month_diff = 8 then 1 else 0 end) month_8,
        sum(case when month_diff = 9 then 1 else 0 end) month_9,
        sum(case when month_diff = 10 then 1 else 0 end) month_10,
        sum(case when month_diff = 11 then 1 else 0 end) month_11,
        sum(case when month_diff = 12 then 1 else 0 end) month_12
        from g3 group  by min_month
        ),
        rt2 as
        (select min_month month_id,
        month_0 month0,
        (case when month_0=0 then 0 else round((month_0 - month_1)/month_0,4)*100 end) month1,
        (case when month_0=0 then 0 else round((month_0 - month_2)/month_0,4)*100 end) month2,
        (case when month_0=0 then 0 else round((month_0 - month_3)/month_0,4)*100 end) month3,
        (case when month_0=0 then 0 else round((month_0 - month_4)/month_0,4)*100 end) month4,
        (case when month_0=0 then 0 else round((month_0 - month_5)/month_0,4)*100 end) month5,
        (case when month_0=0 then 0 else round((month_0 - month_6)/month_0,4)*100 end) month6,
        (case when month_0=0 then 0 else round((month_0 - month_7)/month_0,4)*100 end) month7,
        (case when month_0=0 then 0 else round((month_0 - month_8)/month_0,4)*100 end) month8,
        (case when month_0=0 then 0 else round((month_0 - month_9)/month_0,4)*100 end) month9,
        (case when month_0=0 then 0 else round((month_0 - month_10)/month_0,4)*100 end) month10,
        (case when month_0=0 then 0 else round((month_0 - month_11)/month_0,4)*100 end) month11,
        (case when month_0=0 then 0 else round((month_0 - month_12)/month_0,4)*100 end) month12
        from rt)
        select
        dt.month_id,
        nvl(rt2.month0,0) total_user,
        nvl(rt2.month1,0) month1,
        nvl(rt2.month2,0) month2,
        nvl(rt2.month3,0) month3,
        nvl(rt2.month4,0) month4,
        nvl(rt2.month5,0) month5,
        nvl(rt2.month6,0) month6,
        nvl(rt2.month7,0) month7,
        nvl(rt2.month8,0) month8,
        nvl(rt2.month9,0) month9,
        nvl(rt2.month10,0) month10,
        nvl(rt2.month11,0) month11,
        nvl(rt2.month12,0) month12
        from rt2 right join
        (select month_id from w_month  where month_id &gt;= #{beginDt} and month_id &lt;= #{endDt}) dt
        on rt2.month_id=dt.month_id
        order by dt.month_id
    </select>

    <!-- 计算某个spu下流失用户数 -->
    <select id="getLossUserMonthBySpu" resultMap="datePeriodKpiMap">
        WITH g1 AS
        (
        SELECT MONTH BUY_MONTH,
        T.USER_ID,
        T.IS_FP
        FROM w_Order_Details t,w_date dt,(SELECT PRODUCT_ID,SPU_WID FROM W_PRODUCT) spu
        where t.valid_status=1
        and t.product_id=spu.product_id
        and t.order_dt_wid=dt.row_wid
        and dt.month &gt;= #{beginDt}
        and dt.month &lt;= #{endDt}
        AND SPU.SPU_WID= #{spuId}
        ),
        g2 as(  --每月新增的用户
        SELECT G1.USER_ID,G1.BUY_MONTH MIN_MONTH FROM G1 WHERE G1.IS_FP='Y' GROUP BY G1.USER_ID,G1.BUY_MONTH
        ),
        --每个用户 及其购买月份
        g3 as(
        SELECT BUY_MONTH,
        USER_ID
        FROM g1
        GROUP BY BUY_MONTH,USER_ID
        )
        SELECT g2.MIN_MONTH,g3.BUY_MONTH,COUNT(*) C_USERS FROM  g2,g3
        WHERE g2.USER_ID = g3.USER_ID
        GROUP BY g2.MIN_MONTH,g3.BUY_MONTH
        ORDER BY g2.MIN_MONTH,g3.BUY_MONTH
    </select>

    <!-- 按自然月查看流失用户数 -->
    <select id="getLossUserMonth" resultMap="datePeriodKpiMap">
        WITH g1 AS
        (
        SELECT MONTH BUY_MONTH,
        T.USER_ID,
        T.IS_FP
        FROM W_ORDERS T,W_DATE DT  WHERE t.valid_status=1
        AND DT.MONTH &gt;= #{beginDt}
        AND DT.MONTH &lt;= #{endDt}
        AND T.ORDER_DT_WID=DT.ROW_WID
        ),
        g2 as(  --每月新增的用户
        SELECT G1.USER_ID,G1.BUY_MONTH MIN_MONTH FROM G1 WHERE G1.IS_FP='Y' GROUP BY G1.USER_ID,G1.BUY_MONTH
        ),
        --每个用户 及其购买月份
        g3 as(
        SELECT BUY_MONTH,
        USER_ID
        FROM g1
        GROUP BY BUY_MONTH,USER_ID
        )
        SELECT g2.MIN_MONTH,g3.BUY_MONTH,COUNT(*) C_USERS FROM  g2,g3
        WHERE g2.USER_ID = g3.USER_ID
        GROUP BY g2.MIN_MONTH,g3.BUY_MONTH
        ORDER BY g2.MIN_MONTH,g3.BUY_MONTH
    </select>

    <!-- 按间隔月查看流失用户数 -->
    <select id="getLossUserDMonth" resultType="map">
        with g1 as
        (
        SELECT
        dt.month buy_month,
        t.user_id,
        t.is_fp
        FROM w_Orders t,w_date dt
        where t.valid_status=1
        and t.order_dt_wid=dt.row_wid
        and dt.month &gt;= #{beginDt}
        and dt.month &lt;= #{endDt}
        ),
        g2 as(  --每月新增的用户
        SELECT G1.USER_ID,G1.BUY_MONTH MIN_MONTH FROM G1 WHERE G1.IS_FP='Y' GROUP BY G1.USER_ID,G1.BUY_MONTH
        ),
        g3 as(
        --如果用户一个月有多单，则只计算一次
        SELECT
        DISTINCT
        g1.user_id,
        g1.buy_month,
        g2.min_month,
        months_between(to_date(g1.buy_month,'yyyymm'), to_date(g2.min_month,'yyyymm')) month_diff
        FROM g1,g2 where g1.user_id=g2.user_id
        ),
        rt as(
        select
        min_month month_id,
        sum(case when month_diff = 0 then 1 else 0 end) month0,
        sum(case when month_diff = 1 then 1 else 0 end) month1,
        sum(case when month_diff = 2 then 1 else 0 end) month2,
        sum(case when month_diff = 3 then 1 else 0 end) month3,
        sum(case when month_diff = 4 then 1 else 0 end) month4,
        sum(case when month_diff = 5 then 1 else 0 end) month5,
        sum(case when month_diff = 6 then 1 else 0 end) month6,
        sum(case when month_diff = 7 then 1 else 0 end) month7,
        sum(case when month_diff = 8 then 1 else 0 end) month8,
        sum(case when month_diff = 9 then 1 else 0 end) month9,
        sum(case when month_diff = 10 then 1 else 0 end) month10,
        sum(case when month_diff = 11 then 1 else 0 end) month11,
        sum(case when month_diff = 12 then 1 else 0 end) month12
        from g3 group  by min_month
        )
        select
        dt.month_id,
        nvl(rt.month0,0) total_user,
        nvl(rt.month0,0) - nvl(rt.month1,0) month1,
        nvl(rt.month0,0) - nvl(rt.month2,0) month2,
        nvl(rt.month0,0) - nvl(rt.month3,0) month3,
        nvl(rt.month0,0) - nvl(rt.month4,0) month4,
        nvl(rt.month0,0) - nvl(rt.month5,0) month5,
        nvl(rt.month0,0) - nvl(rt.month6,0) month6,
        nvl(rt.month0,0) - nvl(rt.month7,0) month7,
        nvl(rt.month0,0) - nvl(rt.month8,0) month8,
        nvl(rt.month0,0) - nvl(rt.month9,0) month9,
        nvl(rt.month0,0) - nvl(rt.month10,0) month10,
        nvl(rt.month0,0) - nvl(rt.month11,0) month11,
        nvl(rt.month0,0) - nvl(rt.month12,0) month12
        from rt right join
        (select month_id from w_month  where month_id &gt;= #{beginDt} and month_id &lt;= #{endDt}) dt
        on rt.month_id=dt.month_id
        order by dt.month_id
    </select>

    <!-- 查看某个spu下的流失用户 -->
    <select id="getLossUserDMonthBySpu" resultType="map">
        with g1 as
        (
        SELECT
        dt.month buy_month,
        t.user_id,
        t.is_fp
        FROM w_Order_Details t,w_date dt,(SELECT PRODUCT_ID,SPU_WID FROM W_PRODUCT) spu
        where t.valid_status=1
        and t.product_id=spu.product_id
        and t.order_dt_wid=dt.row_wid
        and dt.month &gt;= #{beginDt}
        and dt.month &lt;= #{endDt}
        AND SPU.SPU_WID= #{spuId}
        ),
        g2 as(  --每月新增的用户
        SELECT G1.USER_ID,G1.BUY_MONTH MIN_MONTH FROM G1 WHERE G1.IS_FP='Y' GROUP BY G1.USER_ID,G1.BUY_MONTH
        ),
        g3 as(
        --如果用户一个月有多单，则只计算一次
        SELECT
        DISTINCT
        g1.user_id,
        g1.buy_month,
        g2.min_month,
        months_between(to_date(g1.buy_month,'yyyymm'), to_date(g2.min_month,'yyyymm')) month_diff
        FROM g1,g2 where g1.user_id=g2.user_id
        ),
        rt as(
        select
        min_month month_id,
        sum(case when month_diff = 0 then 1 else 0 end) month0,
        sum(case when month_diff = 1 then 1 else 0 end) month1,
        sum(case when month_diff = 2 then 1 else 0 end) month2,
        sum(case when month_diff = 3 then 1 else 0 end) month3,
        sum(case when month_diff = 4 then 1 else 0 end) month4,
        sum(case when month_diff = 5 then 1 else 0 end) month5,
        sum(case when month_diff = 6 then 1 else 0 end) month6,
        sum(case when month_diff = 7 then 1 else 0 end) month7,
        sum(case when month_diff = 8 then 1 else 0 end) month8,
        sum(case when month_diff = 9 then 1 else 0 end) month9,
        sum(case when month_diff = 10 then 1 else 0 end) month10,
        sum(case when month_diff = 11 then 1 else 0 end) month11,
        sum(case when month_diff = 12 then 1 else 0 end) month12
        from g3 group  by min_month
        )
        select
        dt.month_id,
        nvl(rt.month0,0) total_user,
        nvl(rt.month0,0) - nvl(rt.month1,0) month1,
        nvl(rt.month0,0) - nvl(rt.month2,0) month2,
        nvl(rt.month0,0) - nvl(rt.month3,0) month3,
        nvl(rt.month0,0) - nvl(rt.month4,0) month4,
        nvl(rt.month0,0) - nvl(rt.month5,0) month5,
        nvl(rt.month0,0) - nvl(rt.month6,0) month6,
        nvl(rt.month0,0) - nvl(rt.month7,0) month7,
        nvl(rt.month0,0) - nvl(rt.month8,0) month8,
        nvl(rt.month0,0) - nvl(rt.month9,0) month9,
        nvl(rt.month0,0) - nvl(rt.month10,0) month10,
        nvl(rt.month0,0) - nvl(rt.month11,0) month11,
        nvl(rt.month0,0) - nvl(rt.month12,0) month12
        from rt right join
        (select month_id from w_month  where month_id &gt;= #{beginDt} and month_id &lt;= #{endDt}) dt
        on rt.month_id=dt.month_id
        order by dt.month_id
    </select>

    <!-- 按间隔月查看客单价 -->
    <select id="getUpriceData" resultType="map">
        with g1 as
        (
        SELECT
        dt.month buy_month,
        t.real_fee,
        t.user_id,
        t.is_fp
        FROM w_Orders t,w_date dt
        where t.valid_status=1
        and t.order_dt_wid=dt.row_wid
        and dt.month &gt;=#{start}
        and dt.month &lt;=#{end}
        ),
        g2 as(  --每月新增的用户
        SELECT G1.USER_ID,G1.BUY_MONTH MIN_MONTH FROM G1 WHERE G1.IS_FP='Y' GROUP BY G1.USER_ID,G1.BUY_MONTH
        ),
        g3 as(
        SELECT
        count(distinct g1.user_id) usercnt,
        g1.user_id,
        g1.buy_month,
        g2.min_month,
        months_between(to_date(g1.buy_month,'yyyymm'), to_date(g2.min_month,'yyyymm')) month_diff,
        sum(g1.real_fee) u_fee
        FROM g1,g2 where g1.user_id=g2.user_id
        group by
        g1.user_id,
        g1.buy_month,
        g2.min_month,
        months_between(to_date(g1.buy_month,'yyyymm'), to_date(g2.min_month,'yyyymm'))
        ),
        rt as(
        select
        min_month month_id,
        sum(case when month_diff = 0 then usercnt else 0 end) usercnt,
        sum(case when month_diff = 0 then u_fee else 0 end) u_fee,
        sum(case when month_diff = 1 then usercnt else 0 end) usercnt_1,
        sum(case when month_diff = 1 then u_fee else 0 end) u_fee_1,
        sum(case when month_diff = 2 then usercnt else 0 end) usercnt_2,
        sum(case when month_diff = 2 then u_fee else 0 end) u_fee_2,
        sum(case when month_diff = 3 then usercnt else 0 end) usercnt_3,
        sum(case when month_diff = 3 then u_fee else 0 end) u_fee_3,
        sum(case when month_diff = 4 then usercnt else 0 end) usercnt_4,
        sum(case when month_diff = 4 then u_fee else 0 end) u_fee_4,
        sum(case when month_diff = 5 then usercnt else 0 end) usercnt_5,
        sum(case when month_diff = 5 then u_fee else 0 end) u_fee_5,
        sum(case when month_diff = 6 then usercnt else 0 end) usercnt_6,
        sum(case when month_diff = 6 then u_fee else 0 end) u_fee_6,
        sum(case when month_diff = 7 then usercnt else 0 end) usercnt_7,
        sum(case when month_diff = 7 then u_fee else 0 end) u_fee_7,
        sum(case when month_diff = 8 then usercnt else 0 end) usercnt_8,
        sum(case when month_diff = 8 then u_fee else 0 end) u_fee_8,
        sum(case when month_diff = 9 then usercnt else 0 end) usercnt_9,
        sum(case when month_diff = 9 then u_fee else 0 end) u_fee_9,
        sum(case when month_diff = 10 then usercnt else 0 end) usercnt_10,
        sum(case when month_diff = 10 then u_fee else 0 end) u_fee_10,
        sum(case when month_diff = 11 then usercnt else 0 end) usercnt_11,
        sum(case when month_diff = 11 then u_fee else 0 end) u_fee_11,
        sum(case when month_diff = 12 then usercnt else 0 end) usercnt_12,
        sum(case when month_diff = 12 then u_fee else 0 end) u_fee_12
        from g3 group  by min_month
        )
        select
        dt.month_id,
        rt.usercnt total_user,
        (case when rt.usercnt=0 then NULL else trunc(rt.u_fee/rt.usercnt) end) uprice,
        (case when rt.usercnt_1=0 then NULL else trunc(rt.u_fee_1/rt.usercnt_1) end) uprice1,
        (case when rt.usercnt_2=0 then NULL else trunc(rt.u_fee_2/rt.usercnt_2) end) uprice2,
        (case when rt.usercnt_3=0 then NULL else trunc(rt.u_fee_3/rt.usercnt_3) end) uprice3,
        (case when rt.usercnt_4=0 then NULL else trunc(rt.u_fee_4/rt.usercnt_4) end) uprice4,
        (case when rt.usercnt_5=0 then NULL else trunc(rt.u_fee_5/rt.usercnt_5) end) uprice5,
        (case when rt.usercnt_6=0 then NULL else trunc(rt.u_fee_6/rt.usercnt_6) end) uprice6,
        (case when rt.usercnt_7=0 then NULL else trunc(rt.u_fee_7/rt.usercnt_7) end) uprice7,
        (case when rt.usercnt_8=0 then NULL else trunc(rt.u_fee_8/rt.usercnt_8) end) uprice8,
        (case when rt.usercnt_9=0 then NULL else trunc(rt.u_fee_9/rt.usercnt_9) end) uprice9,
        (case when rt.usercnt_10=0 then NULL else trunc(rt.u_fee_10/rt.usercnt_10) end) uprice10,
        (case when rt.usercnt_11=0 then NULL else trunc(rt.u_fee_11/rt.usercnt_11) end) uprice11,
        (case when rt.usercnt_12=0 then NULL else trunc(rt.u_fee_12/rt.usercnt_12) end) uprice12
        from rt right join
        (select month_id from w_month  where month_id &gt;=#{start} and month_id &lt;=#{end}) dt
        on rt.month_id=dt.month_id
        order by dt.month_id
    </select>

    <!-- 按自然月查看客单价 -->
    <select id="getUpriceDataMonth" resultMap="datePeriodKpiMap">
        WITH g1 AS
        (
        SELECT MONTH BUY_MONTH,
        T.USER_ID,
        T.REAL_FEE,
        t.is_fp
        FROM W_ORDERS T,W_DATE DT  WHERE t.valid_status=1
        AND DT.MONTH &gt;= #{start}
        AND DT.MONTH &lt;= #{end}
        AND T.ORDER_DT_WID=DT.ROW_WID
        ),
        g2 as(  --每月新增的用户
        SELECT G1.USER_ID,G1.BUY_MONTH MIN_MONTH FROM G1 WHERE G1.IS_FP='Y' GROUP BY G1.USER_ID,G1.BUY_MONTH
        ),
        g3 as(
        SELECT BUY_MONTH,
        USER_ID,
        SUM(REAL_FEE) SUM_FEE
        FROM g1
        GROUP BY BUY_MONTH,USER_ID
        ),
        g4 as(
        SELECT g2.MIN_MONTH,g3.BUY_MONTH,COUNT(*) C_USERS,SUM(SUM_FEE) C_FEE  FROM  g2,g3
        WHERE g2.USER_ID = g3.USER_ID
        GROUP BY g2.MIN_MONTH,g3.BUY_MONTH
        ORDER BY g2.MIN_MONTH,g3.BUY_MONTH)
        SELECT
        MIN_MONTH,
        BUY_MONTH,
        (CASE WHEN C_USERS=0 THEN 0 ELSE TRUNC(C_FEE/C_USERS) END) UPRICE,
        C_USERS
        from g4
    </select>

    <!-- 查看某个spu下的客单价 间隔月 -->
    <select id="getUpriceDataMonthBySpu" resultMap="datePeriodKpiMap">
        WITH g1 AS
        (
        SELECT MONTH BUY_MONTH,
        T.USER_ID,
        T.PRICE*T.QUANTITY-T.DISCOUNT REAL_FEE,
        T.IS_FP
        FROM w_Order_Details t,w_date dt,(SELECT PRODUCT_ID,SPU_WID FROM W_PRODUCT) spu
        where t.valid_status=1
        and t.product_id=spu.product_id
        and t.order_dt_wid=dt.row_wid
        and dt.month &gt;= #{start}
        and dt.month &lt;= #{end}
        and spu.spu_wid= #{spuId}
        ),
        g2 as(  --每月新增的用户
        SELECT G1.USER_ID,G1.BUY_MONTH MIN_MONTH FROM G1 WHERE G1.IS_FP='Y' GROUP BY G1.USER_ID,G1.BUY_MONTH
        ),
        g3 as(
        SELECT BUY_MONTH,
        USER_ID,
        SUM(REAL_FEE) SUM_FEE
        FROM g1
        GROUP BY BUY_MONTH,USER_ID
        ),
        g4 as(
        SELECT g2.MIN_MONTH,g3.BUY_MONTH,COUNT(*) C_USERS,SUM(SUM_FEE) C_FEE  FROM  g2,g3
        WHERE g2.USER_ID = g3.USER_ID
        GROUP BY g2.MIN_MONTH,g3.BUY_MONTH
        ORDER BY g2.MIN_MONTH,g3.BUY_MONTH)
        SELECT
        MIN_MONTH,
        BUY_MONTH,
        (CASE WHEN C_USERS=0 THEN 0 ELSE TRUNC(C_FEE/C_USERS) END) UPRICE,
        C_USERS
        from g4
    </select>

     <!-- 查看某个SPU下的客单价 按自然月 -->
    <select id="getUpriceDataBySpu" resultType="map">
        with g1 as
        (
        SELECT
        dt.month buy_month,
        T.PRICE*T.QUANTITY-T.DISCOUNT REAL_FEE,
        t.user_id,
        t.is_fp
        FROM w_Order_Details t,w_date dt,(SELECT PRODUCT_ID,SPU_WID FROM W_PRODUCT) spu
        where t.valid_status=1
        and t.product_id=spu.product_id
        and t.order_dt_wid=dt.row_wid
        and dt.month &gt;=#{start}
        and dt.month &lt;=#{end}
        and spu.spu_wid= #{spuId}
        ),
        g2 as(  --每月新增的用户
        SELECT G1.USER_ID,G1.BUY_MONTH MIN_MONTH FROM G1 WHERE G1.IS_FP='Y' GROUP BY G1.USER_ID,G1.BUY_MONTH
        ),
        g3 as(
        SELECT
        count(distinct g1.user_id) usercnt,
        g1.user_id,
        g1.buy_month,
        g2.min_month,
        months_between(to_date(g1.buy_month,'yyyymm'), to_date(g2.min_month,'yyyymm')) month_diff,
        sum(g1.real_fee) u_fee
        FROM g1,g2 where g1.user_id=g2.user_id
        group by
        g1.user_id,
        g1.buy_month,
        g2.min_month,
        months_between(to_date(g1.buy_month,'yyyymm'), to_date(g2.min_month,'yyyymm'))
        ),
        rt as(
        select
        min_month month_id,
        sum(case when month_diff = 0 then usercnt else 0 end) usercnt,
        sum(case when month_diff = 0 then u_fee else 0 end) u_fee,
        sum(case when month_diff = 1 then usercnt else 0 end) usercnt_1,
        sum(case when month_diff = 1 then u_fee else 0 end) u_fee_1,
        sum(case when month_diff = 2 then usercnt else 0 end) usercnt_2,
        sum(case when month_diff = 2 then u_fee else 0 end) u_fee_2,
        sum(case when month_diff = 3 then usercnt else 0 end) usercnt_3,
        sum(case when month_diff = 3 then u_fee else 0 end) u_fee_3,
        sum(case when month_diff = 4 then usercnt else 0 end) usercnt_4,
        sum(case when month_diff = 4 then u_fee else 0 end) u_fee_4,
        sum(case when month_diff = 5 then usercnt else 0 end) usercnt_5,
        sum(case when month_diff = 5 then u_fee else 0 end) u_fee_5,
        sum(case when month_diff = 6 then usercnt else 0 end) usercnt_6,
        sum(case when month_diff = 6 then u_fee else 0 end) u_fee_6,
        sum(case when month_diff = 7 then usercnt else 0 end) usercnt_7,
        sum(case when month_diff = 7 then u_fee else 0 end) u_fee_7,
        sum(case when month_diff = 8 then usercnt else 0 end) usercnt_8,
        sum(case when month_diff = 8 then u_fee else 0 end) u_fee_8,
        sum(case when month_diff = 9 then usercnt else 0 end) usercnt_9,
        sum(case when month_diff = 9 then u_fee else 0 end) u_fee_9,
        sum(case when month_diff = 10 then usercnt else 0 end) usercnt_10,
        sum(case when month_diff = 10 then u_fee else 0 end) u_fee_10,
        sum(case when month_diff = 11 then usercnt else 0 end) usercnt_11,
        sum(case when month_diff = 11 then u_fee else 0 end) u_fee_11,
        sum(case when month_diff = 12 then usercnt else 0 end) usercnt_12,
        sum(case when month_diff = 12 then u_fee else 0 end) u_fee_12
        from g3 group  by min_month
        )
        select
        dt.month_id,
        rt.usercnt total_user,
        (case when rt.usercnt=0 then NULL else trunc(rt.u_fee/rt.usercnt) end) uprice,
        (case when rt.usercnt_1=0 then NULL else trunc(rt.u_fee_1/rt.usercnt_1) end) uprice1,
        (case when rt.usercnt_2=0 then NULL else trunc(rt.u_fee_2/rt.usercnt_2) end) uprice2,
        (case when rt.usercnt_3=0 then NULL else trunc(rt.u_fee_3/rt.usercnt_3) end) uprice3,
        (case when rt.usercnt_4=0 then NULL else trunc(rt.u_fee_4/rt.usercnt_4) end) uprice4,
        (case when rt.usercnt_5=0 then NULL else trunc(rt.u_fee_5/rt.usercnt_5) end) uprice5,
        (case when rt.usercnt_6=0 then NULL else trunc(rt.u_fee_6/rt.usercnt_6) end) uprice6,
        (case when rt.usercnt_7=0 then NULL else trunc(rt.u_fee_7/rt.usercnt_7) end) uprice7,
        (case when rt.usercnt_8=0 then NULL else trunc(rt.u_fee_8/rt.usercnt_8) end) uprice8,
        (case when rt.usercnt_9=0 then NULL else trunc(rt.u_fee_9/rt.usercnt_9) end) uprice9,
        (case when rt.usercnt_10=0 then NULL else trunc(rt.u_fee_10/rt.usercnt_10) end) uprice10,
        (case when rt.usercnt_11=0 then NULL else trunc(rt.u_fee_11/rt.usercnt_11) end) uprice11,
        (case when rt.usercnt_12=0 then NULL else trunc(rt.u_fee_12/rt.usercnt_12) end) uprice12
        from rt right join
        (select month_id from w_month  where month_id &gt;=#{start} and month_id &lt;=#{end}) dt
        on rt.month_id=dt.month_id
        order by dt.month_id
    </select>

    <!-- 查看订单价 间隔月 -->
    <select id="getPriceData" resultType="map">
        with g1 as
        (
        SELECT
        dt.month buy_month,
        t.real_fee,
        t.user_id,
        t.is_fp
        FROM w_Orders t,w_date dt
        where t.valid_status=1
        and t.order_dt_wid=dt.row_wid
        and dt.month &gt;= #{start}
        and dt.month &lt;= #{end}
        ),
        g2 as(  --每月新增的用户
        SELECT G1.USER_ID,G1.BUY_MONTH MIN_MONTH FROM G1 WHERE G1.IS_FP='Y' GROUP BY G1.USER_ID,G1.BUY_MONTH
        ),
        g3 as(
        SELECT
        count(*) pocnt, --订单数
        count(distinct g1.user_id) usercnt,
        g1.user_id,
        g1.buy_month,
        g2.min_month,
        months_between(to_date(g1.buy_month,'yyyymm'), to_date(g2.min_month,'yyyymm')) month_diff,
        sum(g1.real_fee) u_fee
        FROM g1,g2 where g1.user_id=g2.user_id
        group by
        g1.user_id,
        g1.buy_month,
        g2.min_month,
        months_between(to_date(g1.buy_month,'yyyymm'), to_date(g2.min_month,'yyyymm'))
        ),
        rt as(
        select
        min_month month_id,
        sum(case when month_diff = 0 then usercnt else 0 end) usercnt,
        sum(case when month_diff = 0 then pocnt else 0 end) pocnt,
        sum(case when month_diff = 0 then u_fee else 0 end) u_fee,
        sum(case when month_diff = 1 then pocnt else 0 end) pocnt_1,
        sum(case when month_diff = 1 then u_fee else 0 end) u_fee_1,
        sum(case when month_diff = 2 then pocnt else 0 end) pocnt_2,
        sum(case when month_diff = 2 then u_fee else 0 end) u_fee_2,
        sum(case when month_diff = 3 then pocnt else 0 end) pocnt_3,
        sum(case when month_diff = 3 then u_fee else 0 end) u_fee_3,
        sum(case when month_diff = 4 then pocnt else 0 end) pocnt_4,
        sum(case when month_diff = 4 then u_fee else 0 end) u_fee_4,
        sum(case when month_diff = 5 then pocnt else 0 end) pocnt_5,
        sum(case when month_diff = 5 then u_fee else 0 end) u_fee_5,
        sum(case when month_diff = 6 then pocnt else 0 end) pocnt_6,
        sum(case when month_diff = 6 then u_fee else 0 end) u_fee_6,
        sum(case when month_diff = 7 then pocnt else 0 end) pocnt_7,
        sum(case when month_diff = 7 then u_fee else 0 end) u_fee_7,
        sum(case when month_diff = 8 then pocnt else 0 end) pocnt_8,
        sum(case when month_diff = 8 then u_fee else 0 end) u_fee_8,
        sum(case when month_diff = 9 then pocnt else 0 end) pocnt_9,
        sum(case when month_diff = 9 then u_fee else 0 end) u_fee_9,
        sum(case when month_diff = 10 then pocnt else 0 end) pocnt_10,
        sum(case when month_diff = 10 then u_fee else 0 end) u_fee_10,
        sum(case when month_diff = 11 then pocnt else 0 end) pocnt_11,
        sum(case when month_diff = 11 then u_fee else 0 end) u_fee_11,
        sum(case when month_diff = 12 then pocnt else 0 end) pocnt_12,
        sum(case when month_diff = 12 then u_fee else 0 end) u_fee_12
        from g3 group  by min_month
        )
        select
        dt.month_id,
        rt.usercnt total_user,  --用户数
        (case when rt.pocnt=0 then NULL else trunc(rt.u_fee/rt.pocnt) end) price, --订单价
        (case when rt.pocnt_1=0 then NULL else trunc(rt.u_fee_1/rt.pocnt_1) end) price1,
        (case when rt.pocnt_2=0 then NULL else trunc(rt.u_fee_2/rt.pocnt_2) end) price2,
        (case when rt.pocnt_3=0 then NULL else trunc(rt.u_fee_3/rt.pocnt_3) end) price3,
        (case when rt.pocnt_4=0 then NULL else trunc(rt.u_fee_4/rt.pocnt_4) end) price4,
        (case when rt.pocnt_5=0 then NULL else trunc(rt.u_fee_5/rt.pocnt_5) end) price5,
        (case when rt.pocnt_6=0 then NULL else trunc(rt.u_fee_6/rt.pocnt_6) end) price6,
        (case when rt.pocnt_7=0 then NULL else trunc(rt.u_fee_7/rt.pocnt_7) end) price7,
        (case when rt.pocnt_8=0 then NULL else trunc(rt.u_fee_8/rt.pocnt_8) end) price8,
        (case when rt.pocnt_9=0 then NULL else trunc(rt.u_fee_9/rt.pocnt_9) end) price9,
        (case when rt.pocnt_10=0 then NULL else trunc(rt.u_fee_10/rt.pocnt_10) end) price10,
        (case when rt.pocnt_11=0 then NULL else trunc(rt.u_fee_11/rt.pocnt_11) end) price11,
        (case when rt.pocnt_12=0 then NULL else trunc(rt.u_fee_12/rt.pocnt_12) end) price12
        from rt right join
        (select month_id from w_month  where month_id &gt;=#{start} and month_id &lt;=#{end}) dt
        on rt.month_id=dt.month_id
        order by dt.month_id
    </select>

    <!-- 按自然月查看订单价 -->
    <select id="getPriceDataMonth" resultMap="datePeriodKpiMap">
        WITH g1 AS
        (
        SELECT MONTH BUY_MONTH,
        T.USER_ID,
        T.REAL_FEE,
        T.ID,
        T.IS_FP
        FROM W_ORDERS T,W_DATE DT  WHERE t.valid_status=1
        AND DT.MONTH &gt;=#{start}
        AND DT.MONTH &lt;=#{end}
        AND T.ORDER_DT_WID=DT.ROW_WID
        ),
        g2 as(  --每月新增的用户
        SELECT G1.USER_ID,G1.BUY_MONTH MIN_MONTH FROM G1 WHERE G1.IS_FP='Y' GROUP BY G1.USER_ID,G1.BUY_MONTH
        ),
        --每个用户 及其购买月份
        g3 as(
        SELECT BUY_MONTH,
        USER_ID,
        SUM(REAL_FEE) SUM_FEE,
        COUNT(ID) POCNT
        FROM g1
        GROUP BY BUY_MONTH,USER_ID
        ),
        g4 as(
        SELECT g2.MIN_MONTH,g3.BUY_MONTH,COUNT(*) C_USERS,SUM(SUM_FEE) C_FEE,SUM(POCNT) C_POCNT  FROM  g2,g3
        WHERE g2.USER_ID = g3.USER_ID
        GROUP BY g2.MIN_MONTH,g3.BUY_MONTH
        ORDER BY g2.MIN_MONTH,g3.BUY_MONTH)
        SELECT
        MIN_MONTH,
        BUY_MONTH,
        (CASE WHEN C_POCNT=0 THEN 0 ELSE TRUNC(C_FEE/C_POCNT) END) PRICE,
        C_USERS
        from g4
    </select>

    <!-- 查看某个SPU下的订单价 自然月 -->
    <select id="getPriceDataMonthBySpu" resultMap="datePeriodKpiMap">
        WITH g1 AS
        (
        SELECT MONTH BUY_MONTH,
        T.USER_ID,
        T.PRICE*T.QUANTITY-T.DISCOUNT REAL_FEE,
        T.ID,
        T.IS_FP
        FROM w_Order_Details t,w_date dt,(SELECT PRODUCT_ID,SPU_WID FROM W_PRODUCT) spu
        where t.valid_status=1
        and t.product_id=spu.product_id
        and t.order_dt_wid=dt.row_wid
        and dt.month &gt;= #{start}
        and dt.month &lt;= #{end}
        and spu.spu_wid= #{spuId}
        ),
        g2 as(  --每月新增的用户
        SELECT G1.USER_ID,G1.BUY_MONTH MIN_MONTH FROM G1 WHERE G1.IS_FP='Y' GROUP BY G1.USER_ID,G1.BUY_MONTH
        ),
        --每个用户 及其购买月份
        g3 as(
        SELECT BUY_MONTH,
        USER_ID,
        SUM(REAL_FEE) SUM_FEE,
        COUNT(ID) POCNT
        FROM g1
        GROUP BY BUY_MONTH,USER_ID
        ),
        g4 as(
        SELECT g2.MIN_MONTH,g3.BUY_MONTH,COUNT(*) C_USERS,SUM(SUM_FEE) C_FEE,SUM(POCNT) C_POCNT  FROM  g2,g3
        WHERE g2.USER_ID = g3.USER_ID
        GROUP BY g2.MIN_MONTH,g3.BUY_MONTH
        ORDER BY g2.MIN_MONTH,g3.BUY_MONTH)
        SELECT
        MIN_MONTH,
        BUY_MONTH,
        (CASE WHEN C_POCNT=0 THEN 0 ELSE TRUNC(C_FEE/C_POCNT) END) PRICE,
        C_USERS
        from g4
    </select>

    <!-- 查看某个SPU下的订单价 按间隔月 -->
    <select id="getPriceDataBySpu" resultType="map">
        with g1 as
        (
        SELECT
        dt.month buy_month,
        T.PRICE*T.QUANTITY-T.DISCOUNT REAL_FEE,
        t.user_id,
        t.is_fp
        FROM w_Order_Details t,w_date dt,(SELECT PRODUCT_ID,SPU_WID FROM W_PRODUCT) spu
        where t.valid_status=1
        and t.product_id=spu.product_id
        and t.order_dt_wid=dt.row_wid
        and dt.month &gt;= #{start}
        and dt.month &lt;= #{end}
        and spu.spu_wid= #{spuId}
        ),
        g2 as(  --每月新增的用户
        SELECT G1.USER_ID,G1.BUY_MONTH MIN_MONTH FROM G1 WHERE G1.IS_FP='Y' GROUP BY G1.USER_ID,G1.BUY_MONTH
        ),
        g3 as(
        SELECT
        count(*) pocnt, --订单数
        count(distinct g1.user_id) usercnt,
        g1.user_id,
        g1.buy_month,
        g2.min_month,
        months_between(to_date(g1.buy_month,'yyyymm'), to_date(g2.min_month,'yyyymm')) month_diff,
        sum(g1.real_fee) u_fee
        FROM g1,g2 where g1.user_id=g2.user_id
        group by
        g1.user_id,
        g1.buy_month,
        g2.min_month,
        months_between(to_date(g1.buy_month,'yyyymm'), to_date(g2.min_month,'yyyymm'))
        ),
        rt as(
        select
        min_month month_id,
        sum(case when month_diff = 0 then usercnt else 0 end) usercnt,
        sum(case when month_diff = 0 then pocnt else 0 end) pocnt,
        sum(case when month_diff = 0 then u_fee else 0 end) u_fee,
        sum(case when month_diff = 1 then pocnt else 0 end) pocnt_1,
        sum(case when month_diff = 1 then u_fee else 0 end) u_fee_1,
        sum(case when month_diff = 2 then pocnt else 0 end) pocnt_2,
        sum(case when month_diff = 2 then u_fee else 0 end) u_fee_2,
        sum(case when month_diff = 3 then pocnt else 0 end) pocnt_3,
        sum(case when month_diff = 3 then u_fee else 0 end) u_fee_3,
        sum(case when month_diff = 4 then pocnt else 0 end) pocnt_4,
        sum(case when month_diff = 4 then u_fee else 0 end) u_fee_4,
        sum(case when month_diff = 5 then pocnt else 0 end) pocnt_5,
        sum(case when month_diff = 5 then u_fee else 0 end) u_fee_5,
        sum(case when month_diff = 6 then pocnt else 0 end) pocnt_6,
        sum(case when month_diff = 6 then u_fee else 0 end) u_fee_6,
        sum(case when month_diff = 7 then pocnt else 0 end) pocnt_7,
        sum(case when month_diff = 7 then u_fee else 0 end) u_fee_7,
        sum(case when month_diff = 8 then pocnt else 0 end) pocnt_8,
        sum(case when month_diff = 8 then u_fee else 0 end) u_fee_8,
        sum(case when month_diff = 9 then pocnt else 0 end) pocnt_9,
        sum(case when month_diff = 9 then u_fee else 0 end) u_fee_9,
        sum(case when month_diff = 10 then pocnt else 0 end) pocnt_10,
        sum(case when month_diff = 10 then u_fee else 0 end) u_fee_10,
        sum(case when month_diff = 11 then pocnt else 0 end) pocnt_11,
        sum(case when month_diff = 11 then u_fee else 0 end) u_fee_11,
        sum(case when month_diff = 12 then pocnt else 0 end) pocnt_12,
        sum(case when month_diff = 12 then u_fee else 0 end) u_fee_12
        from g3 group  by min_month
        )
        select
        dt.month_id,
        rt.usercnt total_user,  --用户数
        (case when rt.pocnt=0 then NULL else trunc(rt.u_fee/rt.pocnt) end) price, --订单价
        (case when rt.pocnt_1=0 then NULL else trunc(rt.u_fee_1/rt.pocnt_1) end) price1,
        (case when rt.pocnt_2=0 then NULL else trunc(rt.u_fee_2/rt.pocnt_2) end) price2,
        (case when rt.pocnt_3=0 then NULL else trunc(rt.u_fee_3/rt.pocnt_3) end) price3,
        (case when rt.pocnt_4=0 then NULL else trunc(rt.u_fee_4/rt.pocnt_4) end) price4,
        (case when rt.pocnt_5=0 then NULL else trunc(rt.u_fee_5/rt.pocnt_5) end) price5,
        (case when rt.pocnt_6=0 then NULL else trunc(rt.u_fee_6/rt.pocnt_6) end) price6,
        (case when rt.pocnt_7=0 then NULL else trunc(rt.u_fee_7/rt.pocnt_7) end) price7,
        (case when rt.pocnt_8=0 then NULL else trunc(rt.u_fee_8/rt.pocnt_8) end) price8,
        (case when rt.pocnt_9=0 then NULL else trunc(rt.u_fee_9/rt.pocnt_9) end) price9,
        (case when rt.pocnt_10=0 then NULL else trunc(rt.u_fee_10/rt.pocnt_10) end) price10,
        (case when rt.pocnt_11=0 then NULL else trunc(rt.u_fee_11/rt.pocnt_11) end) price11,
        (case when rt.pocnt_12=0 then NULL else trunc(rt.u_fee_12/rt.pocnt_12) end) price12
        from rt right join
        (select month_id from w_month  where month_id &gt;=#{start} and month_id &lt;=#{end}) dt
        on rt.month_id=dt.month_id
        order by dt.month_id
    </select>

    <!-- 获取某个SPU的拟合曲线 数据 -->
    <select id="getCeofBySpu" resultType="string" parameterType="string">
        SELECT FORMULA_VALUE FROM UO_LC_SPU_LIFECYCLE WHERE SPU_ID=#{spuId} and FORMULA_VALUE is not null
    </select>
</mapper>
